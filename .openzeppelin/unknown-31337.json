{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "txHash": "0xa2c5620df61171bdd03a421474bca42e5a0e005eaa2a1459d659e8322001a2b5",
    "deployTransaction": {
      "hash": "0xa2c5620df61171bdd03a421474bca42e5a0e005eaa2a1459d659e8322001a2b5",
      "type": 2,
      "accessList": [],
      "blockHash": "0xc8409a9069bf20dc6cfbba2cf757bbd061587a1a8b1bfbcc501419be81e82ae9",
      "blockNumber": 3,
      "transactionIndex": 0,
      "confirmations": 1,
      "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x67279590"
      },
      "maxPriorityFeePerGas": {
        "type": "BigNumber",
        "hex": "0x3c06800a"
      },
      "maxFeePerGas": {
        "type": "BigNumber",
        "hex": "0x729c5f47"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x0762b4"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 2,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x0f5ecb75a42ec41d0dd23502cb07936d38214961689f710e7d00fb7721824ed6",
      "s": "0x69915fe83dbbbf6193dfffefaef747487b2e6a98d656ef3a96f52cc7af83de5f",
      "v": 0,
      "creates": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
      "chainId": 31337
    }
  },
  "proxies": [
    {
      "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
      "txHash": "0xd33a91c12eac40cf134a266b63211972a47f11928ee1cc4bc5d31cbcb4bab9cc",
      "kind": "transparent"
    },
    {
      "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
      "txHash": "0xcbae0b7e868e208e854f537cd7175cd0f0b12d8e8b5dc9acb240a949915476d3",
      "kind": "transparent"
    }
  ],
  "impls": {
    "8b1eef9ebb9811d2d1f4ca0b07bddf88c44af049bbedcba1870ef5512eff3cdb": {
      "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
      "txHash": "0xb2a083b3088be1f82a93673250ea1ccefb2d12973abe367f4520f4b1c4cbf714",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ZapMarketV2",
            "label": "mediaContracts",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "src": "contracts/nft/ZapMarketV2.sol:31"
          },
          {
            "contract": "ZapMarketV2",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/nft/ZapMarketV2.sol:34"
          },
          {
            "contract": "ZapMarketV2",
            "label": "_tokenBidders",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Bid)6978_storage)))",
            "src": "contracts/nft/ZapMarketV2.sol:37"
          },
          {
            "contract": "ZapMarketV2",
            "label": "_bidShares",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(BidShares)6993_storage))",
            "src": "contracts/nft/ZapMarketV2.sol:41"
          },
          {
            "contract": "ZapMarketV2",
            "label": "_tokenAsks",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Ask)6983_storage))",
            "src": "contracts/nft/ZapMarketV2.sol:47"
          },
          {
            "contract": "ZapMarketV2",
            "label": "isConfigured",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/ZapMarketV2.sol:50"
          },
          {
            "contract": "ZapMarketV2",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/nft/ZapMarketV2.sol:52"
          }
        ],
        "types": {
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Bid)6978_storage)))": {
            "label": "mapping(address => mapping(uint256 => mapping(address => struct IMarket.Bid)))"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(Bid)6978_storage))": {
            "label": "mapping(uint256 => mapping(address => struct IMarket.Bid))"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(Bid)6978_storage)": {
            "label": "mapping(address => struct IMarket.Bid)"
          },
          "t_struct(Bid)6978_storage": {
            "label": "struct IMarket.Bid",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "bidder",
                "type": "t_address"
              },
              {
                "label": "recipient",
                "type": "t_address"
              },
              {
                "label": "sellOnShare",
                "type": "t_struct(D256)3526_storage"
              }
            ]
          },
          "t_struct(D256)3526_storage": {
            "label": "struct Decimal.D256",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(BidShares)6993_storage))": {
            "label": "mapping(address => mapping(uint256 => struct IMarket.BidShares))"
          },
          "t_mapping(t_uint256,t_struct(BidShares)6993_storage)": {
            "label": "mapping(uint256 => struct IMarket.BidShares)"
          },
          "t_struct(BidShares)6993_storage": {
            "label": "struct IMarket.BidShares",
            "members": [
              {
                "label": "prevOwner",
                "type": "t_struct(D256)3526_storage"
              },
              {
                "label": "creator",
                "type": "t_struct(D256)3526_storage"
              },
              {
                "label": "owner",
                "type": "t_struct(D256)3526_storage"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Ask)6983_storage))": {
            "label": "mapping(address => mapping(uint256 => struct IMarket.Ask))"
          },
          "t_mapping(t_uint256,t_struct(Ask)6983_storage)": {
            "label": "mapping(uint256 => struct IMarket.Ask)"
          },
          "t_struct(Ask)6983_storage": {
            "label": "struct IMarket.Ask",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "02e044d5971e5bb3cefa503f1b2d5ec84b96b9ef7ef3b0283980442036a1acee": {
      "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
      "txHash": "0xcf842c28a11be49185a94ba105ed08c455b7062d4becd35a5cc000a42a3173e8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ZapMarketV2",
            "label": "mediaContracts",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "src": "contracts/nft/ZapMarketV2.sol:31"
          },
          {
            "contract": "ZapMarketV2",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/nft/ZapMarketV2.sol:34"
          },
          {
            "contract": "ZapMarketV2",
            "label": "_tokenBidders",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Bid)6986_storage)))",
            "src": "contracts/nft/ZapMarketV2.sol:37"
          },
          {
            "contract": "ZapMarketV2",
            "label": "_bidShares",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(BidShares)7001_storage))",
            "src": "contracts/nft/ZapMarketV2.sol:41"
          },
          {
            "contract": "ZapMarketV2",
            "label": "_tokenAsks",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Ask)6991_storage))",
            "src": "contracts/nft/ZapMarketV2.sol:47"
          },
          {
            "contract": "ZapMarketV2",
            "label": "isConfigured",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/ZapMarketV2.sol:50"
          },
          {
            "contract": "ZapMarketV2",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/nft/ZapMarketV2.sol:52"
          }
        ],
        "types": {
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Bid)6986_storage)))": {
            "label": "mapping(address => mapping(uint256 => mapping(address => struct IMarket.Bid)))"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(Bid)6986_storage))": {
            "label": "mapping(uint256 => mapping(address => struct IMarket.Bid))"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(Bid)6986_storage)": {
            "label": "mapping(address => struct IMarket.Bid)"
          },
          "t_struct(Bid)6986_storage": {
            "label": "struct IMarket.Bid",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "bidder",
                "type": "t_address"
              },
              {
                "label": "recipient",
                "type": "t_address"
              },
              {
                "label": "sellOnShare",
                "type": "t_struct(D256)3526_storage"
              }
            ]
          },
          "t_struct(D256)3526_storage": {
            "label": "struct Decimal.D256",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(BidShares)7001_storage))": {
            "label": "mapping(address => mapping(uint256 => struct IMarket.BidShares))"
          },
          "t_mapping(t_uint256,t_struct(BidShares)7001_storage)": {
            "label": "mapping(uint256 => struct IMarket.BidShares)"
          },
          "t_struct(BidShares)7001_storage": {
            "label": "struct IMarket.BidShares",
            "members": [
              {
                "label": "prevOwner",
                "type": "t_struct(D256)3526_storage"
              },
              {
                "label": "creator",
                "type": "t_struct(D256)3526_storage"
              },
              {
                "label": "owner",
                "type": "t_struct(D256)3526_storage"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Ask)6991_storage))": {
            "label": "mapping(address => mapping(uint256 => struct IMarket.Ask))"
          },
          "t_mapping(t_uint256,t_struct(Ask)6991_storage)": {
            "label": "mapping(uint256 => struct IMarket.Ask)"
          },
          "t_struct(Ask)6991_storage": {
            "label": "struct IMarket.Ask",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "5679c4c3a19b5214f3f4fd88329ff6e0ef919a21dd0a0411ca8015d309195f44": {
      "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
      "txHash": "0xb7f54be1ec21fef79d612c2faf42b34bd3f4db0aead878d0a7af49a0156e5de8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ZapMarketV2",
            "label": "mediaContracts",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "src": "contracts/nft/upgradeTests/ZapMarketV2.sol:31"
          },
          {
            "contract": "ZapMarketV2",
            "label": "_owner",
            "type": "t_address",
            "src": "contracts/nft/upgradeTests/ZapMarketV2.sol:34"
          },
          {
            "contract": "ZapMarketV2",
            "label": "_tokenBidders",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Bid)5979_storage)))",
            "src": "contracts/nft/upgradeTests/ZapMarketV2.sol:37"
          },
          {
            "contract": "ZapMarketV2",
            "label": "_bidShares",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(BidShares)5994_storage))",
            "src": "contracts/nft/upgradeTests/ZapMarketV2.sol:41"
          },
          {
            "contract": "ZapMarketV2",
            "label": "_tokenAsks",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Ask)5984_storage))",
            "src": "contracts/nft/upgradeTests/ZapMarketV2.sol:47"
          },
          {
            "contract": "ZapMarketV2",
            "label": "isConfigured",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/upgradeTests/ZapMarketV2.sol:50"
          },
          {
            "contract": "ZapMarketV2",
            "label": "initialized",
            "type": "t_bool",
            "src": "contracts/nft/upgradeTests/ZapMarketV2.sol:52"
          }
        ],
        "types": {
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(Bid)5979_storage)))": {
            "label": "mapping(address => mapping(uint256 => mapping(address => struct IMarket.Bid)))"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(Bid)5979_storage))": {
            "label": "mapping(uint256 => mapping(address => struct IMarket.Bid))"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(Bid)5979_storage)": {
            "label": "mapping(address => struct IMarket.Bid)"
          },
          "t_struct(Bid)5979_storage": {
            "label": "struct IMarket.Bid",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "bidder",
                "type": "t_address"
              },
              {
                "label": "recipient",
                "type": "t_address"
              },
              {
                "label": "sellOnShare",
                "type": "t_struct(D256)3526_storage"
              }
            ]
          },
          "t_struct(D256)3526_storage": {
            "label": "struct Decimal.D256",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(BidShares)5994_storage))": {
            "label": "mapping(address => mapping(uint256 => struct IMarket.BidShares))"
          },
          "t_mapping(t_uint256,t_struct(BidShares)5994_storage)": {
            "label": "mapping(uint256 => struct IMarket.BidShares)"
          },
          "t_struct(BidShares)5994_storage": {
            "label": "struct IMarket.BidShares",
            "members": [
              {
                "label": "prevOwner",
                "type": "t_struct(D256)3526_storage"
              },
              {
                "label": "creator",
                "type": "t_struct(D256)3526_storage"
              },
              {
                "label": "owner",
                "type": "t_struct(D256)3526_storage"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Ask)5984_storage))": {
            "label": "mapping(address => mapping(uint256 => struct IMarket.Ask))"
          },
          "t_mapping(t_uint256,t_struct(Ask)5984_storage)": {
            "label": "mapping(uint256 => struct IMarket.Ask)"
          },
          "t_struct(Ask)5984_storage": {
            "label": "struct IMarket.Ask",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  }
}
