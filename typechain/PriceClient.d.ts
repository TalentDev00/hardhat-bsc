/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PriceClientInterface extends ethers.utils.Interface {
  functions: {
    "DataQuery()": FunctionFragment;
    "callback(uint256,int256[])": FunctionFragment;
    "cancelQuery(uint256)": FunctionFragment;
    "delegateBond()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "initPriceQuery()": FunctionFragment;
    "latestPrice()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "priceQueryIDs(uint256)": FunctionFragment;
    "priceResults(uint256)": FunctionFragment;
    "priceTimeStamps(uint256)": FunctionFragment;
    "queryBytes32IDs(uint256)": FunctionFragment;
    "queryBytes32Results(uint256,uint256)": FunctionFragment;
    "queryIDs(uint256)": FunctionFragment;
    "queryIntIDs(uint256)": FunctionFragment;
    "queryParams(uint256)": FunctionFragment;
    "queryResults(uint256)": FunctionFragment;
    "querySpec()": FunctionFragment;
    "returnPriceQueries()": FunctionFragment;
    "totalBytes32Queries()": FunctionFragment;
    "totalIntQueries()": FunctionFragment;
    "totalQueries()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateQuery(address,string,bytes32,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DataQuery", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "callback",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelQuery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initPriceQuery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceQueryIDs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceTimeStamps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryBytes32IDs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryBytes32Results",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryIDs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryIntIDs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryParams",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "querySpec", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "returnPriceQueries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBytes32Queries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalIntQueries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQueries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuery",
    values: [string, string, BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "DataQuery", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initPriceQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceQueryIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceTimeStamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryBytes32IDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryBytes32Results",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryIDs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryIntIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "querySpec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnPriceQueries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBytes32Queries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalIntQueries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQueries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuery",
    data: BytesLike
  ): Result;

  events: {
    "MadeQuery(address,string,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Result1(uint256,string)": EventFragment;
    "Result2(uint256,string,string)": EventFragment;
    "Result3(uint256,int256[])": EventFragment;
    "Result32(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MadeQuery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Result1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Result2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Result3"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Result32"): EventFragment;
}

export class PriceClient extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PriceClientInterface;

  functions: {
    DataQuery(overrides?: CallOverrides): Promise<[string]>;

    "DataQuery()"(overrides?: CallOverrides): Promise<[string]>;

    callback(
      id: BigNumberish,
      response: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callback(uint256,int256[])"(
      id: BigNumberish,
      response: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelQuery(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelQuery(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateBond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "delegateBond()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    initPriceQuery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initPriceQuery()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    latestPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "latestPrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    priceQueryIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "priceQueryIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceResults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "priceResults(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceTimeStamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "priceTimeStamps(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    queryBytes32IDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "queryBytes32IDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    queryBytes32Results(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "queryBytes32Results(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    queryIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "queryIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    queryIntIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "queryIntIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    queryParams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "queryParams(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    queryResults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "queryResults(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    querySpec(overrides?: CallOverrides): Promise<[string]>;

    "querySpec()"(overrides?: CallOverrides): Promise<[string]>;

    returnPriceQueries(
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

    "returnPriceQueries()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

    totalBytes32Queries(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalBytes32Queries()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalIntQueries(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalIntQueries()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalQueries(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalQueries()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateQuery(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateQuery(address,string,bytes32,bytes32[])"(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DataQuery(overrides?: CallOverrides): Promise<string>;

  "DataQuery()"(overrides?: CallOverrides): Promise<string>;

  callback(
    id: BigNumberish,
    response: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callback(uint256,int256[])"(
    id: BigNumberish,
    response: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelQuery(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelQuery(uint256)"(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateBond(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "delegateBond()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  initPriceQuery(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initPriceQuery()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  latestPrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "latestPrice()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  priceQueryIDs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "priceQueryIDs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceResults(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "priceResults(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceTimeStamps(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "priceTimeStamps(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  queryBytes32IDs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "queryBytes32IDs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  queryBytes32Results(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "queryBytes32Results(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  queryIDs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "queryIDs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  queryIntIDs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "queryIntIDs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  queryParams(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "queryParams(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  queryResults(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "queryResults(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  querySpec(overrides?: CallOverrides): Promise<string>;

  "querySpec()"(overrides?: CallOverrides): Promise<string>;

  returnPriceQueries(
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

  "returnPriceQueries()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

  totalBytes32Queries(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBytes32Queries()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalIntQueries(overrides?: CallOverrides): Promise<BigNumber>;

  "totalIntQueries()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalQueries(overrides?: CallOverrides): Promise<BigNumber>;

  "totalQueries()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateQuery(
    oracleAddr: string,
    query: string,
    specifier: BytesLike,
    params: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateQuery(address,string,bytes32,bytes32[])"(
    oracleAddr: string,
    query: string,
    specifier: BytesLike,
    params: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DataQuery(overrides?: CallOverrides): Promise<string>;

    "DataQuery()"(overrides?: CallOverrides): Promise<string>;

    callback(
      id: BigNumberish,
      response: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "callback(uint256,int256[])"(
      id: BigNumberish,
      response: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelQuery(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "cancelQuery(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateBond(overrides?: CallOverrides): Promise<void>;

    "delegateBond()"(overrides?: CallOverrides): Promise<void>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    initPriceQuery(overrides?: CallOverrides): Promise<BigNumber>;

    "initPriceQuery()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "latestPrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    priceQueryIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceQueryIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceResults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceResults(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceTimeStamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceTimeStamps(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryBytes32IDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryBytes32IDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryBytes32Results(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "queryBytes32Results(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    queryIDs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "queryIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryIntIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryIntIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryParams(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "queryParams(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    queryResults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "queryResults(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    querySpec(overrides?: CallOverrides): Promise<string>;

    "querySpec()"(overrides?: CallOverrides): Promise<string>;

    returnPriceQueries(
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

    "returnPriceQueries()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

    totalBytes32Queries(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBytes32Queries()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalIntQueries(overrides?: CallOverrides): Promise<BigNumber>;

    "totalIntQueries()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueries(overrides?: CallOverrides): Promise<BigNumber>;

    "totalQueries()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateQuery(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateQuery(address,string,bytes32,bytes32[])"(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    MadeQuery(
      oracle: null,
      query: null,
      id: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { oracle: string; query: string; id: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Result1(
      id: null,
      response1: null
    ): TypedEventFilter<
      [BigNumber, string],
      { id: BigNumber; response1: string }
    >;

    Result2(
      id: null,
      response1: null,
      response2: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { id: BigNumber; response1: string; response2: string }
    >;

    Result3(
      id: null,
      response3: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { id: BigNumber; response3: BigNumber[] }
    >;

    Result32(
      id: null,
      response1: null
    ): TypedEventFilter<
      [BigNumber, string],
      { id: BigNumber; response1: string }
    >;
  };

  estimateGas: {
    DataQuery(overrides?: CallOverrides): Promise<BigNumber>;

    "DataQuery()"(overrides?: CallOverrides): Promise<BigNumber>;

    callback(
      id: BigNumberish,
      response: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callback(uint256,int256[])"(
      id: BigNumberish,
      response: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelQuery(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelQuery(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateBond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "delegateBond()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    initPriceQuery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initPriceQuery()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    latestPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "latestPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceQueryIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceQueryIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceResults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceResults(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceTimeStamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceTimeStamps(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryBytes32IDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryBytes32IDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryBytes32Results(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryBytes32Results(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryIDs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "queryIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryIntIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryIntIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryParams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryParams(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryResults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryResults(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    querySpec(overrides?: CallOverrides): Promise<BigNumber>;

    "querySpec()"(overrides?: CallOverrides): Promise<BigNumber>;

    returnPriceQueries(overrides?: CallOverrides): Promise<BigNumber>;

    "returnPriceQueries()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBytes32Queries(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBytes32Queries()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalIntQueries(overrides?: CallOverrides): Promise<BigNumber>;

    "totalIntQueries()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueries(overrides?: CallOverrides): Promise<BigNumber>;

    "totalQueries()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateQuery(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateQuery(address,string,bytes32,bytes32[])"(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DataQuery(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DataQuery()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callback(
      id: BigNumberish,
      response: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callback(uint256,int256[])"(
      id: BigNumberish,
      response: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelQuery(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelQuery(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateBond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "delegateBond()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initPriceQuery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initPriceQuery()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    latestPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "latestPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceQueryIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceQueryIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceResults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceResults(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceTimeStamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceTimeStamps(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryBytes32IDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryBytes32IDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryBytes32Results(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryBytes32Results(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryIntIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryIntIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryParams(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryParams(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryResults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queryResults(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    querySpec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "querySpec()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnPriceQueries(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "returnPriceQueries()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBytes32Queries(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalBytes32Queries()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalIntQueries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalIntQueries()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalQueries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalQueries()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateQuery(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateQuery(address,string,bytes32,bytes32[])"(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
