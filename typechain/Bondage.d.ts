/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BondageInterface extends ethers.utils.Interface {
  functions: {
    "arbiterAddress()": FunctionFragment;
    "bond(address,bytes32,uint256)": FunctionFragment;
    "calcZapForDots(address,bytes32,uint256)": FunctionFragment;
    "currentCostOfDot(address,bytes32,uint256)": FunctionFragment;
    "db()": FunctionFragment;
    "delegateBond(address,address,bytes32,uint256)": FunctionFragment;
    "dispatchAddress()": FunctionFragment;
    "dotLimit(address,bytes32)": FunctionFragment;
    "escrowDots(address,address,bytes32,uint256)": FunctionFragment;
    "getBoundDots(address,address,bytes32)": FunctionFragment;
    "getDotsIssued(address,bytes32)": FunctionFragment;
    "getEndpointBroker(address,bytes32)": FunctionFragment;
    "getIndexSize(address)": FunctionFragment;
    "getNumEscrow(address,address,bytes32)": FunctionFragment;
    "getNumZap(address,bytes32)": FunctionFragment;
    "getOracleAddress(address,uint256)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getZapBound(address,bytes32)": FunctionFragment;
    "isProviderInitialized(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "releaseDots(address,address,bytes32,uint256)": FunctionFragment;
    "returnDots(address,address,bytes32,uint256)": FunctionFragment;
    "selfDestruct()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unbond(address,bytes32,uint256)": FunctionFragment;
    "updateDependencies()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "arbiterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bond",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcZapForDots",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentCostOfDot",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "db", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegateBond",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dotLimit",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowDots",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoundDots",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDotsIssued",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndpointBroker",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexSize",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumEscrow",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumZap",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getZapBound",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isProviderInitialized",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseDots",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnDots",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selfDestruct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unbond",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDependencies",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "arbiterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcZapForDots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentCostOfDot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "db", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dotLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "escrowDots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBoundDots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDotsIssued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEndpointBroker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNumZap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getZapBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProviderInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseDots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "returnDots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfDestruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unbond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDependencies",
    data: BytesLike
  ): Result;

  events: {
    "Bound(address,address,bytes32,uint256,uint256)": EventFragment;
    "Escrowed(address,address,bytes32,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Released(address,address,bytes32,uint256)": EventFragment;
    "Returned(address,address,bytes32,uint256)": EventFragment;
    "Unbound(address,address,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Escrowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Returned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbound"): EventFragment;
}

export class Bondage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BondageInterface;

  functions: {
    arbiterAddress(overrides?: CallOverrides): Promise<[string]>;

    "arbiterAddress()"(overrides?: CallOverrides): Promise<[string]>;

    bond(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bond(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcZapForDots(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numZap: BigNumber }>;

    "calcZapForDots(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numZap: BigNumber }>;

    currentCostOfDot(
      oracleAddress: string,
      endpoint: BytesLike,
      totalBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cost: BigNumber }>;

    "currentCostOfDot(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      totalBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cost: BigNumber }>;

    db(overrides?: CallOverrides): Promise<[string]>;

    "db()"(overrides?: CallOverrides): Promise<[string]>;

    delegateBond(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "delegateBond(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dispatchAddress(overrides?: CallOverrides): Promise<[string]>;

    "dispatchAddress()"(overrides?: CallOverrides): Promise<[string]>;

    dotLimit(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { limit: BigNumber }>;

    "dotLimit(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { limit: BigNumber }>;

    escrowDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "escrowDots(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBoundDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getBoundDots(address,address,bytes32)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDotsIssued(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDotsIssued(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEndpointBroker(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getEndpointBroker(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getIndexSize(
      holderAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getIndexSize(address)"(
      holderAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumEscrow(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNumEscrow(address,address,bytes32)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumZap(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNumZap(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOracleAddress(
      holderAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getOracleAddress(address,uint256)"(
      holderAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    getZapBound(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getZapBound(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isProviderInitialized(
      holderAddress: string,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isProviderInitialized(address,address)"(
      holderAddress: string,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    releaseDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "releaseDots(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "returnDots(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    selfDestruct(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "selfDestruct()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbond(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unbond(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDependencies(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateDependencies()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  arbiterAddress(overrides?: CallOverrides): Promise<string>;

  "arbiterAddress()"(overrides?: CallOverrides): Promise<string>;

  bond(
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bond(address,bytes32,uint256)"(
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcZapForDots(
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcZapForDots(address,bytes32,uint256)"(
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentCostOfDot(
    oracleAddress: string,
    endpoint: BytesLike,
    totalBound: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "currentCostOfDot(address,bytes32,uint256)"(
    oracleAddress: string,
    endpoint: BytesLike,
    totalBound: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  db(overrides?: CallOverrides): Promise<string>;

  "db()"(overrides?: CallOverrides): Promise<string>;

  delegateBond(
    holderAddress: string,
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "delegateBond(address,address,bytes32,uint256)"(
    holderAddress: string,
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dispatchAddress(overrides?: CallOverrides): Promise<string>;

  "dispatchAddress()"(overrides?: CallOverrides): Promise<string>;

  dotLimit(
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "dotLimit(address,bytes32)"(
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  escrowDots(
    holderAddress: string,
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "escrowDots(address,address,bytes32,uint256)"(
    holderAddress: string,
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBoundDots(
    holderAddress: string,
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBoundDots(address,address,bytes32)"(
    holderAddress: string,
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDotsIssued(
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDotsIssued(address,bytes32)"(
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEndpointBroker(
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEndpointBroker(address,bytes32)"(
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getIndexSize(
    holderAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getIndexSize(address)"(
    holderAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumEscrow(
    holderAddress: string,
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumEscrow(address,address,bytes32)"(
    holderAddress: string,
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumZap(
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumZap(address,bytes32)"(
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOracleAddress(
    holderAddress: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getOracleAddress(address,uint256)"(
    holderAddress: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  getZapBound(
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getZapBound(address,bytes32)"(
    oracleAddress: string,
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isProviderInitialized(
    holderAddress: string,
    oracleAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isProviderInitialized(address,address)"(
    holderAddress: string,
    oracleAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  releaseDots(
    holderAddress: string,
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "releaseDots(address,address,bytes32,uint256)"(
    holderAddress: string,
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnDots(
    holderAddress: string,
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "returnDots(address,address,bytes32,uint256)"(
    holderAddress: string,
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  selfDestruct(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "selfDestruct()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbond(
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unbond(address,bytes32,uint256)"(
    oracleAddress: string,
    endpoint: BytesLike,
    numDots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDependencies(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateDependencies()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    arbiterAddress(overrides?: CallOverrides): Promise<string>;

    "arbiterAddress()"(overrides?: CallOverrides): Promise<string>;

    bond(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bond(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcZapForDots(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcZapForDots(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentCostOfDot(
      oracleAddress: string,
      endpoint: BytesLike,
      totalBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentCostOfDot(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      totalBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    db(overrides?: CallOverrides): Promise<string>;

    "db()"(overrides?: CallOverrides): Promise<string>;

    delegateBond(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegateBond(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dispatchAddress(overrides?: CallOverrides): Promise<string>;

    "dispatchAddress()"(overrides?: CallOverrides): Promise<string>;

    dotLimit(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dotLimit(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrowDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "escrowDots(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBoundDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoundDots(address,address,bytes32)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDotsIssued(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDotsIssued(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndpointBroker(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEndpointBroker(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getIndexSize(
      holderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndexSize(address)"(
      holderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumEscrow(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumEscrow(address,address,bytes32)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumZap(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumZap(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleAddress(
      holderAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOracleAddress(address,uint256)"(
      holderAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    getZapBound(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getZapBound(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProviderInitialized(
      holderAddress: string,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isProviderInitialized(address,address)"(
      holderAddress: string,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    releaseDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "releaseDots(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    returnDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "returnDots(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    selfDestruct(overrides?: CallOverrides): Promise<void>;

    "selfDestruct()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unbond(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unbond(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateDependencies(overrides?: CallOverrides): Promise<void>;

    "updateDependencies()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Bound(
      holder: string | null,
      oracle: string | null,
      endpoint: BytesLike | null,
      numZap: null,
      numDots: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        holder: string;
        oracle: string;
        endpoint: string;
        numZap: BigNumber;
        numDots: BigNumber;
      }
    >;

    Escrowed(
      holder: string | null,
      oracle: string | null,
      endpoint: BytesLike | null,
      numDots: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { holder: string; oracle: string; endpoint: string; numDots: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Released(
      holder: string | null,
      oracle: string | null,
      endpoint: BytesLike | null,
      numDots: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { holder: string; oracle: string; endpoint: string; numDots: BigNumber }
    >;

    Returned(
      holder: string | null,
      oracle: string | null,
      endpoint: BytesLike | null,
      numDots: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { holder: string; oracle: string; endpoint: string; numDots: BigNumber }
    >;

    Unbound(
      holder: string | null,
      oracle: string | null,
      endpoint: BytesLike | null,
      numDots: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { holder: string; oracle: string; endpoint: string; numDots: BigNumber }
    >;
  };

  estimateGas: {
    arbiterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "arbiterAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    bond(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bond(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcZapForDots(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcZapForDots(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentCostOfDot(
      oracleAddress: string,
      endpoint: BytesLike,
      totalBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentCostOfDot(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      totalBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    db(overrides?: CallOverrides): Promise<BigNumber>;

    "db()"(overrides?: CallOverrides): Promise<BigNumber>;

    delegateBond(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "delegateBond(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dispatchAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "dispatchAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    dotLimit(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dotLimit(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrowDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "escrowDots(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBoundDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoundDots(address,address,bytes32)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDotsIssued(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDotsIssued(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndpointBroker(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEndpointBroker(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexSize(
      holderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndexSize(address)"(
      holderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumEscrow(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumEscrow(address,address,bytes32)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumZap(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumZap(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleAddress(
      holderAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOracleAddress(address,uint256)"(
      holderAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getZapBound(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getZapBound(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProviderInitialized(
      holderAddress: string,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isProviderInitialized(address,address)"(
      holderAddress: string,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    releaseDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "releaseDots(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "returnDots(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    selfDestruct(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "selfDestruct()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbond(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unbond(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDependencies(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateDependencies()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arbiterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "arbiterAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bond(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bond(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcZapForDots(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcZapForDots(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentCostOfDot(
      oracleAddress: string,
      endpoint: BytesLike,
      totalBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentCostOfDot(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      totalBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    db(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "db()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateBond(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "delegateBond(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dispatchAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dispatchAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dotLimit(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dotLimit(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    escrowDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "escrowDots(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBoundDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBoundDots(address,address,bytes32)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDotsIssued(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDotsIssued(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEndpointBroker(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEndpointBroker(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexSize(
      holderAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIndexSize(address)"(
      holderAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumEscrow(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumEscrow(address,address,bytes32)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumZap(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumZap(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleAddress(
      holderAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOracleAddress(address,uint256)"(
      holderAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getZapBound(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getZapBound(address,bytes32)"(
      oracleAddress: string,
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProviderInitialized(
      holderAddress: string,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isProviderInitialized(address,address)"(
      holderAddress: string,
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "releaseDots(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnDots(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "returnDots(address,address,bytes32,uint256)"(
      holderAddress: string,
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    selfDestruct(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "selfDestruct()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbond(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unbond(address,bytes32,uint256)"(
      oracleAddress: string,
      endpoint: BytesLike,
      numDots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDependencies(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateDependencies()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
