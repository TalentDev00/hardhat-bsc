/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AggregatorInterface extends ethers.utils.Interface {
  functions: {
    "currentReward()": FunctionFragment;
    "currentTotalTips()": FunctionFragment;
    "dataIDs(uint256)": FunctionFragment;
    "dataIDsAll()": FunctionFragment;
    "dataIDsMap(uint256)": FunctionFragment;
    "deity()": FunctionFragment;
    "destroy()": FunctionFragment;
    "difficulty()": FunctionFragment;
    "disputeCount()": FunctionFragment;
    "disputeFee()": FunctionFragment;
    "getCurrentValue(uint256)": FunctionFragment;
    "getDataBefore(uint256,uint256)": FunctionFragment;
    "getIndexForDataBefore(uint256,uint256)": FunctionFragment;
    "getLastValues(uint256,uint256)": FunctionFragment;
    "getLastValuesAll(uint256)": FunctionFragment;
    "getNewValueCountbyRequestId(uint256)": FunctionFragment;
    "getTimestampbyRequestIDandIndex(uint256,uint256)": FunctionFragment;
    "isInDispute(uint256,uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "pushDataID(tuple)": FunctionFragment;
    "replaceDataIDs(tuple[])": FunctionFragment;
    "requestCount()": FunctionFragment;
    "retrieveData(uint256,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setDataID(uint256,tuple)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "slotProgress()": FunctionFragment;
    "stakeAmount()": FunctionFragment;
    "stakeCount()": FunctionFragment;
    "timeOfLastValue()": FunctionFragment;
    "timeTarget()": FunctionFragment;
    "totalTip(uint256)": FunctionFragment;
    "zapminerContract()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "currentReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentTotalTips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataIDs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dataIDsAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataIDsMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deity", values?: undefined): string;
  encodeFunctionData(functionFragment: "destroy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "difficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataBefore",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexForDataBefore",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastValues",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastValuesAll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewValueCountbyRequestId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampbyRequestIDandIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInDispute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pushDataID",
    values: [{ id: BigNumberish; name: string; granularity: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceDataIDs",
    values: [{ id: BigNumberish; name: string; granularity: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDataID",
    values: [
      BigNumberish,
      { id: BigNumberish; name: string; granularity: BigNumberish }
    ]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "slotProgress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeOfLastValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTip",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zapminerContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "currentReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTotalTips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataIDs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataIDsAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataIDsMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "difficulty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disputeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexForDataBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastValuesAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewValueCountbyRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampbyRequestIDandIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushDataID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "replaceDataIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDataID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slotProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeOfLastValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalTip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zapminerContract",
    data: BytesLike
  ): Result;

  events: {};
}

export class Aggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AggregatorInterface;

  functions: {
    currentReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentTotalTips(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentTotalTips()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    dataIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      }
    >;

    "dataIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      }
    >;

    dataIDsAll(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber] & {
          id: BigNumber;
          name: string;
          granularity: BigNumber;
        })[]
      ]
    >;

    "dataIDsAll()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber] & {
          id: BigNumber;
          name: string;
          granularity: BigNumber;
        })[]
      ]
    >;

    dataIDsMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "dataIDsMap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deity(overrides?: CallOverrides): Promise<[string]>;

    "deity()"(overrides?: CallOverrides): Promise<[string]>;

    destroy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "destroy()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    difficulty(overrides?: CallOverrides): Promise<[BigNumber]>;

    "difficulty()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    disputeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "disputeCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    disputeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "disputeFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentValue(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        ifRetrieve: boolean;
        value: BigNumber;
        _timestampRetrieved: BigNumber;
      }
    >;

    "getCurrentValue(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        ifRetrieve: boolean;
        value: BigNumber;
        _timestampRetrieved: BigNumber;
      }
    >;

    getDataBefore(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        _ifRetrieve: boolean;
        _value: BigNumber;
        _timestampRetrieved: BigNumber;
      }
    >;

    "getDataBefore(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        _ifRetrieve: boolean;
        _value: BigNumber;
        _timestampRetrieved: BigNumber;
      }
    >;

    getIndexForDataBefore(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { found: boolean; index: BigNumber }>;

    "getIndexForDataBefore(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { found: boolean; index: BigNumber }>;

    getLastValues(
      _dataID: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [BigNumber, string, BigNumber] & {
            id: BigNumber;
            name: string;
            granularity: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          meta: [BigNumber, string, BigNumber] & {
            id: BigNumber;
            name: string;
            granularity: BigNumber;
          };
          timestamp: BigNumber;
          value: BigNumber;
          tip: BigNumber;
        })[]
      ]
    >;

    "getLastValues(uint256,uint256)"(
      _dataID: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [BigNumber, string, BigNumber] & {
            id: BigNumber;
            name: string;
            granularity: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          meta: [BigNumber, string, BigNumber] & {
            id: BigNumber;
            name: string;
            granularity: BigNumber;
          };
          timestamp: BigNumber;
          value: BigNumber;
          tip: BigNumber;
        })[]
      ]
    >;

    getLastValuesAll(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [BigNumber, string, BigNumber] & {
            id: BigNumber;
            name: string;
            granularity: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          meta: [BigNumber, string, BigNumber] & {
            id: BigNumber;
            name: string;
            granularity: BigNumber;
          };
          timestamp: BigNumber;
          value: BigNumber;
          tip: BigNumber;
        })[]
      ]
    >;

    "getLastValuesAll(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [BigNumber, string, BigNumber] & {
            id: BigNumber;
            name: string;
            granularity: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          meta: [BigNumber, string, BigNumber] & {
            id: BigNumber;
            name: string;
            granularity: BigNumber;
          };
          timestamp: BigNumber;
          value: BigNumber;
          tip: BigNumber;
        })[]
      ]
    >;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNewValueCountbyRequestId(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimestampbyRequestIDandIndex(
      _requestId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTimestampbyRequestIDandIndex(uint256,uint256)"(
      _requestId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isInDispute(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pushDataID(
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pushDataID((uint256,string,uint256))"(
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replaceDataIDs(
      _dataIDs: { id: BigNumberish; name: string; granularity: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "replaceDataIDs(tuple[])"(
      _dataIDs: { id: BigNumberish; name: string; granularity: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "requestCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "retrieveData(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAdmin(address)"(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDataID(
      _id: BigNumberish,
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDataID(uint256,(uint256,string,uint256))"(
      _id: BigNumberish,
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slotProgress(overrides?: CallOverrides): Promise<[BigNumber]>;

    "slotProgress()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakeCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeOfLastValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "timeOfLastValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeTarget(overrides?: CallOverrides): Promise<[BigNumber]>;

    "timeTarget()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTip(
      _dataID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalTip(uint256)"(
      _dataID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    zapminerContract(overrides?: CallOverrides): Promise<[string]>;

    "zapminerContract()"(overrides?: CallOverrides): Promise<[string]>;
  };

  currentReward(overrides?: CallOverrides): Promise<BigNumber>;

  "currentReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  currentTotalTips(overrides?: CallOverrides): Promise<BigNumber>;

  "currentTotalTips()"(overrides?: CallOverrides): Promise<BigNumber>;

  dataIDs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      id: BigNumber;
      name: string;
      granularity: BigNumber;
    }
  >;

  "dataIDs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      id: BigNumber;
      name: string;
      granularity: BigNumber;
    }
  >;

  dataIDsAll(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber] & {
      id: BigNumber;
      name: string;
      granularity: BigNumber;
    })[]
  >;

  "dataIDsAll()"(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber] & {
      id: BigNumber;
      name: string;
      granularity: BigNumber;
    })[]
  >;

  dataIDsMap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "dataIDsMap(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deity(overrides?: CallOverrides): Promise<string>;

  "deity()"(overrides?: CallOverrides): Promise<string>;

  destroy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "destroy()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  difficulty(overrides?: CallOverrides): Promise<BigNumber>;

  "difficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

  disputeCount(overrides?: CallOverrides): Promise<BigNumber>;

  "disputeCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  disputeFee(overrides?: CallOverrides): Promise<BigNumber>;

  "disputeFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentValue(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      ifRetrieve: boolean;
      value: BigNumber;
      _timestampRetrieved: BigNumber;
    }
  >;

  "getCurrentValue(uint256)"(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      ifRetrieve: boolean;
      value: BigNumber;
      _timestampRetrieved: BigNumber;
    }
  >;

  getDataBefore(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      _ifRetrieve: boolean;
      _value: BigNumber;
      _timestampRetrieved: BigNumber;
    }
  >;

  "getDataBefore(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      _ifRetrieve: boolean;
      _value: BigNumber;
      _timestampRetrieved: BigNumber;
    }
  >;

  getIndexForDataBefore(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { found: boolean; index: BigNumber }>;

  "getIndexForDataBefore(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { found: boolean; index: BigNumber }>;

  getLastValues(
    _dataID: BigNumberish,
    _count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      meta: [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      };
      timestamp: BigNumber;
      value: BigNumber;
      tip: BigNumber;
    })[]
  >;

  "getLastValues(uint256,uint256)"(
    _dataID: BigNumberish,
    _count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      meta: [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      };
      timestamp: BigNumber;
      value: BigNumber;
      tip: BigNumber;
    })[]
  >;

  getLastValuesAll(
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      meta: [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      };
      timestamp: BigNumber;
      value: BigNumber;
      tip: BigNumber;
    })[]
  >;

  "getLastValuesAll(uint256)"(
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      meta: [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      };
      timestamp: BigNumber;
      value: BigNumber;
      tip: BigNumber;
    })[]
  >;

  getNewValueCountbyRequestId(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNewValueCountbyRequestId(uint256)"(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimestampbyRequestIDandIndex(
    _requestId: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTimestampbyRequestIDandIndex(uint256,uint256)"(
    _requestId: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isInDispute(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isInDispute(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pushDataID(
    _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pushDataID((uint256,string,uint256))"(
    _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replaceDataIDs(
    _dataIDs: { id: BigNumberish; name: string; granularity: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "replaceDataIDs(tuple[])"(
    _dataIDs: { id: BigNumberish; name: string; granularity: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestCount(overrides?: CallOverrides): Promise<BigNumber>;

  "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  retrieveData(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "retrieveData(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAdmin(address)"(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDataID(
    _id: BigNumberish,
    _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDataID(uint256,(uint256,string,uint256))"(
    _id: BigNumberish,
    _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOracle(address)"(
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slotProgress(overrides?: CallOverrides): Promise<BigNumber>;

  "slotProgress()"(overrides?: CallOverrides): Promise<BigNumber>;

  stakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "stakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  stakeCount(overrides?: CallOverrides): Promise<BigNumber>;

  "stakeCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  timeOfLastValue(overrides?: CallOverrides): Promise<BigNumber>;

  "timeOfLastValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  timeTarget(overrides?: CallOverrides): Promise<BigNumber>;

  "timeTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalTip(
    _dataID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalTip(uint256)"(
    _dataID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  zapminerContract(overrides?: CallOverrides): Promise<string>;

  "zapminerContract()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    currentReward(overrides?: CallOverrides): Promise<BigNumber>;

    "currentReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentTotalTips(overrides?: CallOverrides): Promise<BigNumber>;

    "currentTotalTips()"(overrides?: CallOverrides): Promise<BigNumber>;

    dataIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      }
    >;

    "dataIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      }
    >;

    dataIDsAll(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      })[]
    >;

    "dataIDsAll()"(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        granularity: BigNumber;
      })[]
    >;

    dataIDsMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dataIDsMap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deity(overrides?: CallOverrides): Promise<string>;

    "deity()"(overrides?: CallOverrides): Promise<string>;

    destroy(overrides?: CallOverrides): Promise<void>;

    "destroy()"(overrides?: CallOverrides): Promise<void>;

    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "difficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

    disputeCount(overrides?: CallOverrides): Promise<BigNumber>;

    "disputeCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    disputeFee(overrides?: CallOverrides): Promise<BigNumber>;

    "disputeFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentValue(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        ifRetrieve: boolean;
        value: BigNumber;
        _timestampRetrieved: BigNumber;
      }
    >;

    "getCurrentValue(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        ifRetrieve: boolean;
        value: BigNumber;
        _timestampRetrieved: BigNumber;
      }
    >;

    getDataBefore(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        _ifRetrieve: boolean;
        _value: BigNumber;
        _timestampRetrieved: BigNumber;
      }
    >;

    "getDataBefore(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        _ifRetrieve: boolean;
        _value: BigNumber;
        _timestampRetrieved: BigNumber;
      }
    >;

    getIndexForDataBefore(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { found: boolean; index: BigNumber }>;

    "getIndexForDataBefore(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { found: boolean; index: BigNumber }>;

    getLastValues(
      _dataID: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [BigNumber, string, BigNumber] & {
          id: BigNumber;
          name: string;
          granularity: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        meta: [BigNumber, string, BigNumber] & {
          id: BigNumber;
          name: string;
          granularity: BigNumber;
        };
        timestamp: BigNumber;
        value: BigNumber;
        tip: BigNumber;
      })[]
    >;

    "getLastValues(uint256,uint256)"(
      _dataID: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [BigNumber, string, BigNumber] & {
          id: BigNumber;
          name: string;
          granularity: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        meta: [BigNumber, string, BigNumber] & {
          id: BigNumber;
          name: string;
          granularity: BigNumber;
        };
        timestamp: BigNumber;
        value: BigNumber;
        tip: BigNumber;
      })[]
    >;

    getLastValuesAll(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [BigNumber, string, BigNumber] & {
          id: BigNumber;
          name: string;
          granularity: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        meta: [BigNumber, string, BigNumber] & {
          id: BigNumber;
          name: string;
          granularity: BigNumber;
        };
        timestamp: BigNumber;
        value: BigNumber;
        tip: BigNumber;
      })[]
    >;

    "getLastValuesAll(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [BigNumber, string, BigNumber] & {
          id: BigNumber;
          name: string;
          granularity: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        meta: [BigNumber, string, BigNumber] & {
          id: BigNumber;
          name: string;
          granularity: BigNumber;
        };
        timestamp: BigNumber;
        value: BigNumber;
        tip: BigNumber;
      })[]
    >;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNewValueCountbyRequestId(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampbyRequestIDandIndex(
      _requestId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimestampbyRequestIDandIndex(uint256,uint256)"(
      _requestId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isInDispute(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pushDataID(
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "pushDataID((uint256,string,uint256))"(
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    replaceDataIDs(
      _dataIDs: { id: BigNumberish; name: string; granularity: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "replaceDataIDs(tuple[])"(
      _dataIDs: { id: BigNumberish; name: string; granularity: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    requestCount(overrides?: CallOverrides): Promise<BigNumber>;

    "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retrieveData(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    "setAdmin(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDataID(
      _id: BigNumberish,
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setDataID(uint256,(uint256,string,uint256))"(
      _id: BigNumberish,
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(_oracle: string, overrides?: CallOverrides): Promise<void>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    slotProgress(overrides?: CallOverrides): Promise<BigNumber>;

    "slotProgress()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeCount(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeOfLastValue(overrides?: CallOverrides): Promise<BigNumber>;

    "timeOfLastValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    "timeTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalTip(
      _dataID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalTip(uint256)"(
      _dataID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zapminerContract(overrides?: CallOverrides): Promise<string>;

    "zapminerContract()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    currentReward(overrides?: CallOverrides): Promise<BigNumber>;

    "currentReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentTotalTips(overrides?: CallOverrides): Promise<BigNumber>;

    "currentTotalTips()"(overrides?: CallOverrides): Promise<BigNumber>;

    dataIDs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "dataIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataIDsAll(overrides?: CallOverrides): Promise<BigNumber>;

    "dataIDsAll()"(overrides?: CallOverrides): Promise<BigNumber>;

    dataIDsMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dataIDsMap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deity(overrides?: CallOverrides): Promise<BigNumber>;

    "deity()"(overrides?: CallOverrides): Promise<BigNumber>;

    destroy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "destroy()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "difficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

    disputeCount(overrides?: CallOverrides): Promise<BigNumber>;

    "disputeCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    disputeFee(overrides?: CallOverrides): Promise<BigNumber>;

    "disputeFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentValue(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentValue(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataBefore(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDataBefore(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexForDataBefore(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndexForDataBefore(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastValues(
      _dataID: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastValues(uint256,uint256)"(
      _dataID: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastValuesAll(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastValuesAll(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNewValueCountbyRequestId(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampbyRequestIDandIndex(
      _requestId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimestampbyRequestIDandIndex(uint256,uint256)"(
      _requestId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isInDispute(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pushDataID(
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pushDataID((uint256,string,uint256))"(
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replaceDataIDs(
      _dataIDs: { id: BigNumberish; name: string; granularity: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "replaceDataIDs(tuple[])"(
      _dataIDs: { id: BigNumberish; name: string; granularity: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestCount(overrides?: CallOverrides): Promise<BigNumber>;

    "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retrieveData(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAdmin(address)"(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDataID(
      _id: BigNumberish,
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDataID(uint256,(uint256,string,uint256))"(
      _id: BigNumberish,
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slotProgress(overrides?: CallOverrides): Promise<BigNumber>;

    "slotProgress()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeCount(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeOfLastValue(overrides?: CallOverrides): Promise<BigNumber>;

    "timeOfLastValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    "timeTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalTip(
      _dataID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalTip(uint256)"(
      _dataID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zapminerContract(overrides?: CallOverrides): Promise<BigNumber>;

    "zapminerContract()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    currentReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentReward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentTotalTips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentTotalTips()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dataIDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dataIDs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dataIDsAll(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dataIDsAll()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dataIDsMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dataIDsMap(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    destroy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "destroy()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    difficulty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "difficulty()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disputeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "disputeCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disputeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "disputeFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentValue(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentValue(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataBefore(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDataBefore(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexForDataBefore(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIndexForDataBefore(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastValues(
      _dataID: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastValues(uint256,uint256)"(
      _dataID: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastValuesAll(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastValuesAll(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNewValueCountbyRequestId(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestampbyRequestIDandIndex(
      _requestId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTimestampbyRequestIDandIndex(uint256,uint256)"(
      _requestId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isInDispute(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pushDataID(
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pushDataID((uint256,string,uint256))"(
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replaceDataIDs(
      _dataIDs: { id: BigNumberish; name: string; granularity: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "replaceDataIDs(tuple[])"(
      _dataIDs: { id: BigNumberish; name: string; granularity: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "requestCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "retrieveData(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAdmin(address)"(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDataID(
      _id: BigNumberish,
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDataID(uint256,(uint256,string,uint256))"(
      _id: BigNumberish,
      _dataID: { id: BigNumberish; name: string; granularity: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slotProgress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "slotProgress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakeAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakeCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeOfLastValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timeOfLastValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timeTarget()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTip(
      _dataID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalTip(uint256)"(
      _dataID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zapminerContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zapminerContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
