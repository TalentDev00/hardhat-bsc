/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { BadBidder } from "../BadBidder";

export class BadBidder__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _auction: string,
    _zap: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BadBidder> {
    return super.deploy(_auction, _zap, overrides || {}) as Promise<BadBidder>;
  }
  getDeployTransaction(
    _auction: string,
    _zap: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_auction, _zap, overrides || {});
  }
  attach(address: string): BadBidder {
    return super.attach(address) as BadBidder;
  }
  connect(signer: Signer): BadBidder__factory {
    return super.connect(signer) as BadBidder__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadBidder {
    return new Contract(address, _abi, signerOrProvider) as BadBidder;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_auction",
        type: "address",
      },
      {
        internalType: "address",
        name: "_zap",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "auctionId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "mediaContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "placeBid",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102ab3803806102ab83398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100ae565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008e578182fd5b61009783610060565b91506100a560208401610060565b90509250929050565b6101ee806100bd6000396000f3fe60806040526004361061001f5760003560e01c8063f67a156a1461002857005b3661002657005b005b610026610036366004610173565b60005460405163095ea7b360e01b81526001600160a01b039182166004820152602481018590529082169063095ea7b390604401602060405180830381600087803b15801561008457600080fd5b505af1158015610098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bc919061014c565b5060005460405163c2d3c07b60e01b815260048101869052602481018590526001600160a01b0384811660448301529091169063c2d3c07b90606401600060405180830381600087803b15801561011257600080fd5b505af1158015610126573d6000803e3d6000fd5b5050505050505050565b80356001600160a01b038116811461014757600080fd5b919050565b60006020828403121561015d578081fd5b8151801515811461016c578182fd5b9392505050565b60008060008060808587031215610188578283fd5b843593506020850135925061019f60408601610130565b91506101ad60608601610130565b90509295919450925056fea26469706673582212201cb75fdf1fdb0cf47e6c20e419628faaafa73fda928bc42a5924d4b437cbc0da64736f6c63430008040033";
