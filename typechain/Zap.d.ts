/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZapInterface extends ethers.utils.Interface {
  functions: {
    "addTip(uint256,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "beginDispute(uint256,uint256,uint256)": FunctionFragment;
    "depositStake()": FunctionFragment;
    "getNewCurrentVariables()": FunctionFragment;
    "increaseVaultApproval(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proposeFork(address,uint256)": FunctionFragment;
    "requestData(string,string,uint256,uint256)": FunctionFragment;
    "requestStakingWithdraw()": FunctionFragment;
    "submitMiningSolution(string,uint256,uint256)": FunctionFragment;
    "tallyVotes(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
    "withdrawStake()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTip",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "beginDispute",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNewCurrentVariables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseVaultApproval",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeFork",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestData",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestStakingWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitMiningSolution",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tallyVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addTip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beginDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewCurrentVariables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseVaultApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeFork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestStakingWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitMiningSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tallyVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "DataRequested(address,string,string,uint256,uint256,uint256)": EventFragment;
    "NewChallenge(bytes32,uint256,uint256,uint256,string,uint256)": EventFragment;
    "NewDispute(uint256,uint256,uint256,address)": EventFragment;
    "NewRequestOnDeck(uint256,string,bytes32,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TipAdded(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewChallenge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRequestOnDeck"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TipAdded"): EventFragment;
}

export class Zap extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZapInterface;

  functions: {
    addTip(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addTip(uint256,uint256)"(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    beginDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "beginDispute(uint256,uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositStake()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNewCurrentVariables(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
        BigNumber,
        BigNumber
      ] & {
        _challenge: string;
        _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        _difficutly: BigNumber;
        _tip: BigNumber;
      }
    >;

    "getNewCurrentVariables()"(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
        BigNumber,
        BigNumber
      ] & {
        _challenge: string;
        _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        _difficutly: BigNumber;
        _tip: BigNumber;
      }
    >;

    increaseVaultApproval(
      vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseVaultApproval(address)"(
      vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    proposeFork(
      _propNewZapAddress: string,
      forkedContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "proposeFork(address,uint256)"(
      _propNewZapAddress: string,
      forkedContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestData(
      _c_sapi: string,
      _c_symbol: string,
      _granularity: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestData(string,string,uint256,uint256)"(
      _c_sapi: string,
      _c_symbol: string,
      _granularity: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestStakingWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestStakingWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitMiningSolution(
      _nonce: string,
      _requestId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "submitMiningSolution(string,uint256,uint256)"(
      _nonce: string,
      _requestId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tallyVotes(
      _disputeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "tallyVotes(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "vote(uint256,bool)"(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawStake()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addTip(
    _requestId: BigNumberish,
    _tip: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addTip(uint256,uint256)"(
    _requestId: BigNumberish,
    _tip: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beginDispute(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    _minerIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "beginDispute(uint256,uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    _minerIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositStake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositStake()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNewCurrentVariables(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      BigNumber,
      BigNumber
    ] & {
      _challenge: string;
      _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      _difficutly: BigNumber;
      _tip: BigNumber;
    }
  >;

  "getNewCurrentVariables()"(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      BigNumber,
      BigNumber
    ] & {
      _challenge: string;
      _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      _difficutly: BigNumber;
      _tip: BigNumber;
    }
  >;

  increaseVaultApproval(
    vaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseVaultApproval(address)"(
    vaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  proposeFork(
    _propNewZapAddress: string,
    forkedContract: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "proposeFork(address,uint256)"(
    _propNewZapAddress: string,
    forkedContract: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestData(
    _c_sapi: string,
    _c_symbol: string,
    _granularity: BigNumberish,
    _tip: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestData(string,string,uint256,uint256)"(
    _c_sapi: string,
    _c_symbol: string,
    _granularity: BigNumberish,
    _tip: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestStakingWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestStakingWithdraw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitMiningSolution(
    _nonce: string,
    _requestId: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "submitMiningSolution(string,uint256,uint256)"(
    _nonce: string,
    _requestId: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tallyVotes(
    _disputeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "tallyVotes(uint256)"(
    _disputeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  transfer(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    _disputeId: BigNumberish,
    _supportsDispute: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "vote(uint256,bool)"(
    _disputeId: BigNumberish,
    _supportsDispute: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawStake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawStake()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTip(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addTip(uint256,uint256)"(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beginDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "beginDispute(uint256,uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositStake(overrides?: CallOverrides): Promise<void>;

    "depositStake()"(overrides?: CallOverrides): Promise<void>;

    getNewCurrentVariables(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
        BigNumber,
        BigNumber
      ] & {
        _challenge: string;
        _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        _difficutly: BigNumber;
        _tip: BigNumber;
      }
    >;

    "getNewCurrentVariables()"(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
        BigNumber,
        BigNumber
      ] & {
        _challenge: string;
        _requestIds: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        _difficutly: BigNumber;
        _tip: BigNumber;
      }
    >;

    increaseVaultApproval(
      vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseVaultApproval(address)"(
      vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    proposeFork(
      _propNewZapAddress: string,
      forkedContract: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "proposeFork(address,uint256)"(
      _propNewZapAddress: string,
      forkedContract: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestData(
      _c_sapi: string,
      _c_symbol: string,
      _granularity: BigNumberish,
      _tip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestData(string,string,uint256,uint256)"(
      _c_sapi: string,
      _c_symbol: string,
      _granularity: BigNumberish,
      _tip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestStakingWithdraw(overrides?: CallOverrides): Promise<void>;

    "requestStakingWithdraw()"(overrides?: CallOverrides): Promise<void>;

    submitMiningSolution(
      _nonce: string,
      _requestId: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitMiningSolution(string,uint256,uint256)"(
      _nonce: string,
      _requestId: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tallyVotes(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "tallyVotes(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transfer(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(uint256,bool)"(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStake(overrides?: CallOverrides): Promise<void>;

    "withdrawStake()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Approval(
      _owner: string | null,
      _spender: string | null,
      _value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _owner: string; _spender: string; _value: BigNumber }
    >;

    DataRequested(
      _sender: string | null,
      _query: null,
      _querySymbol: null,
      _granularity: null,
      _requestId: BigNumberish | null,
      _totalTips: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        _sender: string;
        _query: string;
        _querySymbol: string;
        _granularity: BigNumber;
        _requestId: BigNumber;
        _totalTips: BigNumber;
      }
    >;

    NewChallenge(
      _currentChallenge: null,
      _currentRequestId: BigNumberish | null,
      _difficulty: null,
      _multiplier: null,
      _query: null,
      _totalTips: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        _currentChallenge: string;
        _currentRequestId: BigNumber;
        _difficulty: BigNumber;
        _multiplier: BigNumber;
        _query: string;
        _totalTips: BigNumber;
      }
    >;

    NewDispute(
      _disputeId: BigNumberish | null,
      _requestId: BigNumberish | null,
      _timestamp: null,
      _miner: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string],
      {
        _disputeId: BigNumber;
        _requestId: BigNumber;
        _timestamp: BigNumber;
        _miner: string;
      }
    >;

    NewRequestOnDeck(
      _requestId: BigNumberish | null,
      _query: null,
      _onDeckQueryHash: null,
      _onDeckTotalTips: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      {
        _requestId: BigNumber;
        _query: string;
        _onDeckQueryHash: string;
        _onDeckTotalTips: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    TipAdded(
      _sender: string | null,
      _requestId: BigNumberish | null,
      _tip: null,
      _totalTips: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _sender: string;
        _requestId: BigNumber;
        _tip: BigNumber;
        _totalTips: BigNumber;
      }
    >;
  };

  estimateGas: {
    addTip(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addTip(uint256,uint256)"(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beginDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "beginDispute(uint256,uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositStake()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNewCurrentVariables(overrides?: CallOverrides): Promise<BigNumber>;

    "getNewCurrentVariables()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseVaultApproval(
      vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseVaultApproval(address)"(
      vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposeFork(
      _propNewZapAddress: string,
      forkedContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "proposeFork(address,uint256)"(
      _propNewZapAddress: string,
      forkedContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestData(
      _c_sapi: string,
      _c_symbol: string,
      _granularity: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestData(string,string,uint256,uint256)"(
      _c_sapi: string,
      _c_symbol: string,
      _granularity: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestStakingWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestStakingWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitMiningSolution(
      _nonce: string,
      _requestId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "submitMiningSolution(string,uint256,uint256)"(
      _nonce: string,
      _requestId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tallyVotes(
      _disputeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "tallyVotes(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "vote(uint256,bool)"(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawStake()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTip(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addTip(uint256,uint256)"(
      _requestId: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beginDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "beginDispute(uint256,uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositStake()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNewCurrentVariables(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNewCurrentVariables()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseVaultApproval(
      vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseVaultApproval(address)"(
      vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeFork(
      _propNewZapAddress: string,
      forkedContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "proposeFork(address,uint256)"(
      _propNewZapAddress: string,
      forkedContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestData(
      _c_sapi: string,
      _c_symbol: string,
      _granularity: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestData(string,string,uint256,uint256)"(
      _c_sapi: string,
      _c_symbol: string,
      _granularity: BigNumberish,
      _tip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestStakingWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestStakingWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitMiningSolution(
      _nonce: string,
      _requestId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "submitMiningSolution(string,uint256,uint256)"(
      _nonce: string,
      _requestId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tallyVotes(
      _disputeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "tallyVotes(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "vote(uint256,bool)"(
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawStake()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
