/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IMarketInterface extends ethers.utils.Interface {
  functions: {
    "_isConfigured(address)": FunctionFragment;
    "acceptBid(address,uint256,tuple)": FunctionFragment;
    "bidForTokenBidder(address,uint256,address)": FunctionFragment;
    "bidSharesForToken(address,uint256)": FunctionFragment;
    "configure(address,address,bytes32,bytes32,bool)": FunctionFragment;
    "currentAskForToken(address,uint256)": FunctionFragment;
    "isInternal(address)": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "isValidBid(address,uint256,uint256)": FunctionFragment;
    "isValidBidShares(tuple)": FunctionFragment;
    "mintOrBurn(bool,uint256,address)": FunctionFragment;
    "registerMedia(address)": FunctionFragment;
    "removeAsk(address,uint256)": FunctionFragment;
    "removeBid(address,uint256,address)": FunctionFragment;
    "revokeRegistration(address)": FunctionFragment;
    "setAsk(address,uint256,tuple)": FunctionFragment;
    "setAuctionHouse(address)": FunctionFragment;
    "setBid(address,uint256,tuple,address)": FunctionFragment;
    "setBidShares(address,uint256,tuple)": FunctionFragment;
    "setMediaFactory(address)": FunctionFragment;
    "splitShare(tuple,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_isConfigured",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [
      string,
      BigNumberish,
      {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bidForTokenBidder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bidSharesForToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configure",
    values: [string, string, BytesLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "currentAskForToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isInternal", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidBid",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidBidShares",
    values: [
      {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintOrBurn",
    values: [boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMedia",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAsk",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBid",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRegistration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAsk",
    values: [string, BigNumberish, { amount: BigNumberish; currency: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionHouse",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBid",
    values: [
      string,
      BigNumberish,
      {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBidShares",
    values: [
      string,
      BigNumberish,
      {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMediaFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "splitShare",
    values: [{ value: BigNumberish }, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_isConfigured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidForTokenBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidSharesForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configure", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentAskForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isInternal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isValidBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidBidShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintOrBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerMedia",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAsk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBidShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMediaFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splitShare", data: BytesLike): Result;

  events: {
    "AskCreated(address,uint256,tuple)": EventFragment;
    "AskRemoved(uint256,tuple,address)": EventFragment;
    "BidCreated(address,uint256,tuple)": EventFragment;
    "BidFinalized(uint256,tuple,address)": EventFragment;
    "BidRemoved(uint256,tuple,address)": EventFragment;
    "BidShareUpdated(uint256,tuple,address)": EventFragment;
    "Burned(uint256,address)": EventFragment;
    "MediaContractCreated(address,bytes32,bytes32)": EventFragment;
    "Minted(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AskCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AskRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidShareUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MediaContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
}

export class IMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMarketInterface;

  functions: {
    _isConfigured(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "_isConfigured(address)"(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    acceptBid(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptBid(address,uint256,(uint256,address,address,address,(uint256)))"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bidForTokenBidder(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          string,
          string,
          [BigNumber] & { value: BigNumber }
        ] & {
          amount: BigNumber;
          currency: string;
          bidder: string;
          recipient: string;
          sellOnShare: [BigNumber] & { value: BigNumber };
        }
      ]
    >;

    "bidForTokenBidder(address,uint256,address)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          string,
          string,
          [BigNumber] & { value: BigNumber }
        ] & {
          amount: BigNumber;
          currency: string;
          bidder: string;
          recipient: string;
          sellOnShare: [BigNumber] & { value: BigNumber };
        }
      ]
    >;

    bidSharesForToken(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { value: BigNumber },
          [BigNumber] & { value: BigNumber },
          string[],
          BigNumber[]
        ] & {
          creator: [BigNumber] & { value: BigNumber };
          owner: [BigNumber] & { value: BigNumber };
          collaborators: string[];
          collabShares: BigNumber[];
        }
      ]
    >;

    "bidSharesForToken(address,uint256)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { value: BigNumber },
          [BigNumber] & { value: BigNumber },
          string[],
          BigNumber[]
        ] & {
          creator: [BigNumber] & { value: BigNumber };
          owner: [BigNumber] & { value: BigNumber };
          collaborators: string[];
          collabShares: BigNumber[];
        }
      ]
    >;

    configure(
      deployer: string,
      mediaContract: string,
      name: BytesLike,
      symbol: BytesLike,
      isInternal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "configure(address,address,bytes32,bytes32,bool)"(
      deployer: string,
      mediaContract: string,
      name: BytesLike,
      symbol: BytesLike,
      isInternal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentAskForToken(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, string] & { amount: BigNumber; currency: string }]>;

    "currentAskForToken(address,uint256)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, string] & { amount: BigNumber; currency: string }]>;

    isInternal(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isInternal(address)"(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRegistered(
      mediaContractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isRegistered(address)"(
      mediaContractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidBid(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isValidBid(address,uint256,uint256)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidBidShares(
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isValidBidShares(((uint256),(uint256),address[],uint256[]))"(
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintOrBurn(
      isMint: boolean,
      tokenId: BigNumberish,
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintOrBurn(bool,uint256,address)"(
      isMint: boolean,
      tokenId: BigNumberish,
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerMedia(
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerMedia(address)"(
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAsk(
      mediaContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeAsk(address,uint256)"(
      mediaContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeBid(
      mediaContract: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeBid(address,uint256,address)"(
      mediaContract: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRegistration(
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeRegistration(address)"(
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAsk(
      mediaContract: string,
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAsk(address,uint256,(uint256,address))"(
      mediaContract: string,
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionHouse(
      _auctionHouse: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAuctionHouse(address)"(
      _auctionHouse: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBid(
      mediaContract: string,
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBid(address,uint256,(uint256,address,address,address,(uint256)),address)"(
      mediaContract: string,
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBidShares(
      mediaContract: string,
      tokenId: BigNumberish,
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBidShares(address,uint256,((uint256),(uint256),address[],uint256[]))"(
      mediaContract: string,
      tokenId: BigNumberish,
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMediaFactory(
      _mediaFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMediaFactory(address)"(
      _mediaFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    splitShare(
      sharePercentage: { value: BigNumberish },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "splitShare((uint256),uint256)"(
      sharePercentage: { value: BigNumberish },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  _isConfigured(
    mediaContract: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_isConfigured(address)"(
    mediaContract: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  acceptBid(
    mediaContractAddress: string,
    tokenId: BigNumberish,
    expectedBid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptBid(address,uint256,(uint256,address,address,address,(uint256)))"(
    mediaContractAddress: string,
    tokenId: BigNumberish,
    expectedBid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bidForTokenBidder(
    mediaContractAddress: string,
    tokenId: BigNumberish,
    bidder: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, [BigNumber] & { value: BigNumber }] & {
      amount: BigNumber;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: [BigNumber] & { value: BigNumber };
    }
  >;

  "bidForTokenBidder(address,uint256,address)"(
    mediaContractAddress: string,
    tokenId: BigNumberish,
    bidder: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, [BigNumber] & { value: BigNumber }] & {
      amount: BigNumber;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: [BigNumber] & { value: BigNumber };
    }
  >;

  bidSharesForToken(
    mediaContractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { value: BigNumber },
      [BigNumber] & { value: BigNumber },
      string[],
      BigNumber[]
    ] & {
      creator: [BigNumber] & { value: BigNumber };
      owner: [BigNumber] & { value: BigNumber };
      collaborators: string[];
      collabShares: BigNumber[];
    }
  >;

  "bidSharesForToken(address,uint256)"(
    mediaContractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { value: BigNumber },
      [BigNumber] & { value: BigNumber },
      string[],
      BigNumber[]
    ] & {
      creator: [BigNumber] & { value: BigNumber };
      owner: [BigNumber] & { value: BigNumber };
      collaborators: string[];
      collabShares: BigNumber[];
    }
  >;

  configure(
    deployer: string,
    mediaContract: string,
    name: BytesLike,
    symbol: BytesLike,
    isInternal: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "configure(address,address,bytes32,bytes32,bool)"(
    deployer: string,
    mediaContract: string,
    name: BytesLike,
    symbol: BytesLike,
    isInternal: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentAskForToken(
    mediaContractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { amount: BigNumber; currency: string }>;

  "currentAskForToken(address,uint256)"(
    mediaContractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { amount: BigNumber; currency: string }>;

  isInternal(
    mediaContract: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isInternal(address)"(
    mediaContract: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegistered(
    mediaContractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRegistered(address)"(
    mediaContractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidBid(
    mediaContractAddress: string,
    tokenId: BigNumberish,
    bidAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidBid(address,uint256,uint256)"(
    mediaContractAddress: string,
    tokenId: BigNumberish,
    bidAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidBidShares(
    bidShares: {
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
      collaborators: string[];
      collabShares: BigNumberish[];
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidBidShares(((uint256),(uint256),address[],uint256[]))"(
    bidShares: {
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
      collaborators: string[];
      collabShares: BigNumberish[];
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintOrBurn(
    isMint: boolean,
    tokenId: BigNumberish,
    mediaContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintOrBurn(bool,uint256,address)"(
    isMint: boolean,
    tokenId: BigNumberish,
    mediaContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerMedia(
    mediaContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerMedia(address)"(
    mediaContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAsk(
    mediaContract: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeAsk(address,uint256)"(
    mediaContract: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeBid(
    mediaContract: string,
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeBid(address,uint256,address)"(
    mediaContract: string,
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRegistration(
    mediaContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeRegistration(address)"(
    mediaContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAsk(
    mediaContract: string,
    tokenId: BigNumberish,
    ask: { amount: BigNumberish; currency: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAsk(address,uint256,(uint256,address))"(
    mediaContract: string,
    tokenId: BigNumberish,
    ask: { amount: BigNumberish; currency: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionHouse(
    _auctionHouse: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAuctionHouse(address)"(
    _auctionHouse: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBid(
    mediaContract: string,
    tokenId: BigNumberish,
    bid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBid(address,uint256,(uint256,address,address,address,(uint256)),address)"(
    mediaContract: string,
    tokenId: BigNumberish,
    bid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBidShares(
    mediaContract: string,
    tokenId: BigNumberish,
    bidShares: {
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
      collaborators: string[];
      collabShares: BigNumberish[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBidShares(address,uint256,((uint256),(uint256),address[],uint256[]))"(
    mediaContract: string,
    tokenId: BigNumberish,
    bidShares: {
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
      collaborators: string[];
      collabShares: BigNumberish[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMediaFactory(
    _mediaFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMediaFactory(address)"(
    _mediaFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  splitShare(
    sharePercentage: { value: BigNumberish },
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "splitShare((uint256),uint256)"(
    sharePercentage: { value: BigNumberish },
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    _isConfigured(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_isConfigured(address)"(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    acceptBid(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptBid(address,uint256,(uint256,address,address,address,(uint256)))"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    bidForTokenBidder(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        [BigNumber] & { value: BigNumber }
      ] & {
        amount: BigNumber;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: [BigNumber] & { value: BigNumber };
      }
    >;

    "bidForTokenBidder(address,uint256,address)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        [BigNumber] & { value: BigNumber }
      ] & {
        amount: BigNumber;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: [BigNumber] & { value: BigNumber };
      }
    >;

    bidSharesForToken(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { value: BigNumber },
        [BigNumber] & { value: BigNumber },
        string[],
        BigNumber[]
      ] & {
        creator: [BigNumber] & { value: BigNumber };
        owner: [BigNumber] & { value: BigNumber };
        collaborators: string[];
        collabShares: BigNumber[];
      }
    >;

    "bidSharesForToken(address,uint256)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { value: BigNumber },
        [BigNumber] & { value: BigNumber },
        string[],
        BigNumber[]
      ] & {
        creator: [BigNumber] & { value: BigNumber };
        owner: [BigNumber] & { value: BigNumber };
        collaborators: string[];
        collabShares: BigNumber[];
      }
    >;

    configure(
      deployer: string,
      mediaContract: string,
      name: BytesLike,
      symbol: BytesLike,
      isInternal: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "configure(address,address,bytes32,bytes32,bool)"(
      deployer: string,
      mediaContract: string,
      name: BytesLike,
      symbol: BytesLike,
      isInternal: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    currentAskForToken(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { amount: BigNumber; currency: string }>;

    "currentAskForToken(address,uint256)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { amount: BigNumber; currency: string }>;

    isInternal(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isInternal(address)"(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegistered(
      mediaContractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRegistered(address)"(
      mediaContractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidBid(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidBid(address,uint256,uint256)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidBidShares(
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidBidShares(((uint256),(uint256),address[],uint256[]))"(
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintOrBurn(
      isMint: boolean,
      tokenId: BigNumberish,
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintOrBurn(bool,uint256,address)"(
      isMint: boolean,
      tokenId: BigNumberish,
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerMedia(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerMedia(address)"(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAsk(
      mediaContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAsk(address,uint256)"(
      mediaContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBid(
      mediaContract: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeBid(address,uint256,address)"(
      mediaContract: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRegistration(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRegistration(address)"(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAsk(
      mediaContract: string,
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: CallOverrides
    ): Promise<void>;

    "setAsk(address,uint256,(uint256,address))"(
      mediaContract: string,
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionHouse(
      _auctionHouse: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuctionHouse(address)"(
      _auctionHouse: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBid(
      mediaContract: string,
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBid(address,uint256,(uint256,address,address,address,(uint256)),address)"(
      mediaContract: string,
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBidShares(
      mediaContract: string,
      tokenId: BigNumberish,
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setBidShares(address,uint256,((uint256),(uint256),address[],uint256[]))"(
      mediaContract: string,
      tokenId: BigNumberish,
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setMediaFactory(
      _mediaFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMediaFactory(address)"(
      _mediaFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    splitShare(
      sharePercentage: { value: BigNumberish },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "splitShare((uint256),uint256)"(
      sharePercentage: { value: BigNumberish },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AskCreated(
      mediaContract: string | null,
      tokenId: BigNumberish | null,
      ask: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [BigNumber, string] & { amount: BigNumber; currency: string }
      ],
      {
        mediaContract: string;
        tokenId: BigNumber;
        ask: [BigNumber, string] & { amount: BigNumber; currency: string };
      }
    >;

    AskRemoved(
      tokenId: BigNumberish | null,
      ask: null,
      mediaContract: string | null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, string] & { amount: BigNumber; currency: string },
        string
      ],
      {
        tokenId: BigNumber;
        ask: [BigNumber, string] & { amount: BigNumber; currency: string };
        mediaContract: string;
      }
    >;

    BidCreated(
      mediaContract: string | null,
      tokenId: BigNumberish | null,
      bid: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [
          BigNumber,
          string,
          string,
          string,
          [BigNumber] & { value: BigNumber }
        ] & {
          amount: BigNumber;
          currency: string;
          bidder: string;
          recipient: string;
          sellOnShare: [BigNumber] & { value: BigNumber };
        }
      ],
      {
        mediaContract: string;
        tokenId: BigNumber;
        bid: [
          BigNumber,
          string,
          string,
          string,
          [BigNumber] & { value: BigNumber }
        ] & {
          amount: BigNumber;
          currency: string;
          bidder: string;
          recipient: string;
          sellOnShare: [BigNumber] & { value: BigNumber };
        };
      }
    >;

    BidFinalized(
      tokenId: BigNumberish | null,
      bid: null,
      mediaContract: string | null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          BigNumber,
          string,
          string,
          string,
          [BigNumber] & { value: BigNumber }
        ] & {
          amount: BigNumber;
          currency: string;
          bidder: string;
          recipient: string;
          sellOnShare: [BigNumber] & { value: BigNumber };
        },
        string
      ],
      {
        tokenId: BigNumber;
        bid: [
          BigNumber,
          string,
          string,
          string,
          [BigNumber] & { value: BigNumber }
        ] & {
          amount: BigNumber;
          currency: string;
          bidder: string;
          recipient: string;
          sellOnShare: [BigNumber] & { value: BigNumber };
        };
        mediaContract: string;
      }
    >;

    BidRemoved(
      tokenId: BigNumberish | null,
      bid: null,
      mediaContract: string | null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          BigNumber,
          string,
          string,
          string,
          [BigNumber] & { value: BigNumber }
        ] & {
          amount: BigNumber;
          currency: string;
          bidder: string;
          recipient: string;
          sellOnShare: [BigNumber] & { value: BigNumber };
        },
        string
      ],
      {
        tokenId: BigNumber;
        bid: [
          BigNumber,
          string,
          string,
          string,
          [BigNumber] & { value: BigNumber }
        ] & {
          amount: BigNumber;
          currency: string;
          bidder: string;
          recipient: string;
          sellOnShare: [BigNumber] & { value: BigNumber };
        };
        mediaContract: string;
      }
    >;

    BidShareUpdated(
      tokenId: BigNumberish | null,
      bidShares: null,
      mediaContract: string | null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          [BigNumber] & { value: BigNumber },
          [BigNumber] & { value: BigNumber },
          string[],
          BigNumber[]
        ] & {
          creator: [BigNumber] & { value: BigNumber };
          owner: [BigNumber] & { value: BigNumber };
          collaborators: string[];
          collabShares: BigNumber[];
        },
        string
      ],
      {
        tokenId: BigNumber;
        bidShares: [
          [BigNumber] & { value: BigNumber },
          [BigNumber] & { value: BigNumber },
          string[],
          BigNumber[]
        ] & {
          creator: [BigNumber] & { value: BigNumber };
          owner: [BigNumber] & { value: BigNumber };
          collaborators: string[];
          collabShares: BigNumber[];
        };
        mediaContract: string;
      }
    >;

    Burned(
      token: BigNumberish | null,
      mediaContract: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { token: BigNumber; mediaContract: string }
    >;

    MediaContractCreated(
      mediaContract: string | null,
      name: null,
      symbol: null
    ): TypedEventFilter<
      [string, string, string],
      { mediaContract: string; name: string; symbol: string }
    >;

    Minted(
      token: BigNumberish | null,
      mediaContract: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { token: BigNumber; mediaContract: string }
    >;
  };

  estimateGas: {
    _isConfigured(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isConfigured(address)"(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    acceptBid(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptBid(address,uint256,(uint256,address,address,address,(uint256)))"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bidForTokenBidder(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bidForTokenBidder(address,uint256,address)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidSharesForToken(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bidSharesForToken(address,uint256)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configure(
      deployer: string,
      mediaContract: string,
      name: BytesLike,
      symbol: BytesLike,
      isInternal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "configure(address,address,bytes32,bytes32,bool)"(
      deployer: string,
      mediaContract: string,
      name: BytesLike,
      symbol: BytesLike,
      isInternal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentAskForToken(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentAskForToken(address,uint256)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInternal(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isInternal(address)"(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegistered(
      mediaContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRegistered(address)"(
      mediaContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidBid(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidBid(address,uint256,uint256)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidBidShares(
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidBidShares(((uint256),(uint256),address[],uint256[]))"(
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintOrBurn(
      isMint: boolean,
      tokenId: BigNumberish,
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintOrBurn(bool,uint256,address)"(
      isMint: boolean,
      tokenId: BigNumberish,
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerMedia(
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerMedia(address)"(
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAsk(
      mediaContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeAsk(address,uint256)"(
      mediaContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeBid(
      mediaContract: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeBid(address,uint256,address)"(
      mediaContract: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRegistration(
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeRegistration(address)"(
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAsk(
      mediaContract: string,
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAsk(address,uint256,(uint256,address))"(
      mediaContract: string,
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionHouse(
      _auctionHouse: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAuctionHouse(address)"(
      _auctionHouse: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBid(
      mediaContract: string,
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBid(address,uint256,(uint256,address,address,address,(uint256)),address)"(
      mediaContract: string,
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBidShares(
      mediaContract: string,
      tokenId: BigNumberish,
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBidShares(address,uint256,((uint256),(uint256),address[],uint256[]))"(
      mediaContract: string,
      tokenId: BigNumberish,
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMediaFactory(
      _mediaFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMediaFactory(address)"(
      _mediaFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    splitShare(
      sharePercentage: { value: BigNumberish },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "splitShare((uint256),uint256)"(
      sharePercentage: { value: BigNumberish },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _isConfigured(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_isConfigured(address)"(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptBid(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptBid(address,uint256,(uint256,address,address,address,(uint256)))"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bidForTokenBidder(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bidForTokenBidder(address,uint256,address)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidSharesForToken(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bidSharesForToken(address,uint256)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configure(
      deployer: string,
      mediaContract: string,
      name: BytesLike,
      symbol: BytesLike,
      isInternal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "configure(address,address,bytes32,bytes32,bool)"(
      deployer: string,
      mediaContract: string,
      name: BytesLike,
      symbol: BytesLike,
      isInternal: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentAskForToken(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentAskForToken(address,uint256)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInternal(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isInternal(address)"(
      mediaContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegistered(
      mediaContractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRegistered(address)"(
      mediaContractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidBid(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidBid(address,uint256,uint256)"(
      mediaContractAddress: string,
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidBidShares(
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidBidShares(((uint256),(uint256),address[],uint256[]))"(
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintOrBurn(
      isMint: boolean,
      tokenId: BigNumberish,
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintOrBurn(bool,uint256,address)"(
      isMint: boolean,
      tokenId: BigNumberish,
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerMedia(
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerMedia(address)"(
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAsk(
      mediaContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeAsk(address,uint256)"(
      mediaContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeBid(
      mediaContract: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeBid(address,uint256,address)"(
      mediaContract: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRegistration(
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRegistration(address)"(
      mediaContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAsk(
      mediaContract: string,
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAsk(address,uint256,(uint256,address))"(
      mediaContract: string,
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionHouse(
      _auctionHouse: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAuctionHouse(address)"(
      _auctionHouse: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBid(
      mediaContract: string,
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBid(address,uint256,(uint256,address,address,address,(uint256)),address)"(
      mediaContract: string,
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBidShares(
      mediaContract: string,
      tokenId: BigNumberish,
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBidShares(address,uint256,((uint256),(uint256),address[],uint256[]))"(
      mediaContract: string,
      tokenId: BigNumberish,
      bidShares: {
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
        collaborators: string[];
        collabShares: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMediaFactory(
      _mediaFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMediaFactory(address)"(
      _mediaFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    splitShare(
      sharePercentage: { value: BigNumberish },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "splitShare((uint256),uint256)"(
      sharePercentage: { value: BigNumberish },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
