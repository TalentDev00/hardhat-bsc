/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VaultInterface extends ethers.utils.Interface {
  functions: {
    "accounts(uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "getZM()": FunctionFragment;
    "getZT()": FunctionFragment;
    "increaseApproval()": FunctionFragment;
    "migrateVault()": FunctionFragment;
    "setApproval(address)": FunctionFragment;
    "setNewVault(address)": FunctionFragment;
    "userBalance(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "zapToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getZM", values?: undefined): string;
  encodeFunctionData(functionFragment: "getZT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseApproval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setApproval", values: [string]): string;
  encodeFunctionData(functionFragment: "setNewVault", values: [string]): string;
  encodeFunctionData(functionFragment: "userBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "zapToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getZM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getZT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapToken", data: BytesLike): Result;

  events: {};
}

export class Vault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VaultInterface;

  functions: {
    accounts(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "accounts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deposit(
      userAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(address,uint256)"(
      userAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getZM(
      overrides?: CallOverrides
    ): Promise<[string] & { zapMasterAddress: string }>;

    "getZM()"(
      overrides?: CallOverrides
    ): Promise<[string] & { zapMasterAddress: string }>;

    getZT(
      overrides?: CallOverrides
    ): Promise<[string] & { zapTokenAddress: string }>;

    "getZT()"(
      overrides?: CallOverrides
    ): Promise<[string] & { zapTokenAddress: string }>;

    increaseApproval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseApproval()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "migrateVault()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApproval(
      oldVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setApproval(address)"(
      oldVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewVault(
      _newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setNewVault(address)"(
      _newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userBalance(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "userBalance(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    withdraw(
      userAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      userAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zapToken(overrides?: CallOverrides): Promise<[string]>;

    "zapToken()"(overrides?: CallOverrides): Promise<[string]>;
  };

  accounts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "accounts(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  deposit(
    userAddress: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(address,uint256)"(
    userAddress: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getZM(overrides?: CallOverrides): Promise<string>;

  "getZM()"(overrides?: CallOverrides): Promise<string>;

  getZT(overrides?: CallOverrides): Promise<string>;

  "getZT()"(overrides?: CallOverrides): Promise<string>;

  increaseApproval(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseApproval()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateVault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "migrateVault()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApproval(
    oldVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setApproval(address)"(
    oldVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewVault(
    _newVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setNewVault(address)"(
    _newVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userBalance(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userBalance(address)"(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    userAddress: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    userAddress: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zapToken(overrides?: CallOverrides): Promise<string>;

  "zapToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accounts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "accounts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deposit(
      userAddress: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256)"(
      userAddress: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getZM(overrides?: CallOverrides): Promise<string>;

    "getZM()"(overrides?: CallOverrides): Promise<string>;

    getZT(overrides?: CallOverrides): Promise<string>;

    "getZT()"(overrides?: CallOverrides): Promise<string>;

    increaseApproval(overrides?: CallOverrides): Promise<boolean>;

    "increaseApproval()"(overrides?: CallOverrides): Promise<boolean>;

    migrateVault(overrides?: CallOverrides): Promise<boolean>;

    "migrateVault()"(overrides?: CallOverrides): Promise<boolean>;

    setApproval(oldVault: string, overrides?: CallOverrides): Promise<boolean>;

    "setApproval(address)"(
      oldVault: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setNewVault(_newVault: string, overrides?: CallOverrides): Promise<boolean>;

    "setNewVault(address)"(
      _newVault: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userBalance(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBalance(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      userAddress: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      userAddress: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    zapToken(overrides?: CallOverrides): Promise<string>;

    "zapToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    accounts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "accounts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      userAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      userAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getZM(overrides?: CallOverrides): Promise<BigNumber>;

    "getZM()"(overrides?: CallOverrides): Promise<BigNumber>;

    getZT(overrides?: CallOverrides): Promise<BigNumber>;

    "getZT()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseApproval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseApproval()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "migrateVault()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApproval(
      oldVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setApproval(address)"(
      oldVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewVault(
      _newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setNewVault(address)"(
      _newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userBalance(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBalance(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      userAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      userAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zapToken(overrides?: CallOverrides): Promise<BigNumber>;

    "zapToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accounts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      userAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256)"(
      userAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getZM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getZM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getZT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getZT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseApproval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseApproval()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "migrateVault()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApproval(
      oldVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setApproval(address)"(
      oldVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewVault(
      _newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setNewVault(address)"(
      _newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userBalance(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBalance(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      userAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      userAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zapToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zapToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
