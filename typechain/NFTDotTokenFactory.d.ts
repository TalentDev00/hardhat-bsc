/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NFTDotTokenFactoryInterface extends ethers.utils.Interface {
  functions: {
    "ERC721()": FunctionFragment;
    "bond(bytes32)": FunctionFragment;
    "bondWhiteListed(bytes32)": FunctionFragment;
    "bytes32ToString(bytes32)": FunctionFragment;
    "coord()": FunctionFragment;
    "curves(bytes32)": FunctionFragment;
    "curvesTokenPrice(bytes32)": FunctionFragment;
    "curves_list(uint256)": FunctionFragment;
    "getEndpoints()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getTokenAddress(bytes32)": FunctionFragment;
    "initializeCurve(bytes32,bytes32,int256[],uint256,string,bool)": FunctionFragment;
    "newToken(string,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "reserveToken()": FunctionFragment;
    "toBytes(address)": FunctionFragment;
    "tokenFactory()": FunctionFragment;
    "tokensMinted(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unbond(bytes32,uint256)": FunctionFragment;
    "whitelistBonder(bytes32,address,string)": FunctionFragment;
    "whitelistedCurve(bytes32)": FunctionFragment;
    "whitelisting(address,bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ERC721", values?: undefined): string;
  encodeFunctionData(functionFragment: "bond", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "bondWhiteListed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32ToString",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "coord", values?: undefined): string;
  encodeFunctionData(functionFragment: "curves", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "curvesTokenPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "curves_list",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndpoints",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeCurve",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish[],
      BigNumberish,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newToken",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reserveToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "toBytes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensMinted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unbond",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistBonder",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedCurve",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelisting",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ERC721", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondWhiteListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curves", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "curvesTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curves_list",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEndpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toBytes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unbond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistBonder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelisting",
    data: BytesLike
  ): Result;

  events: {
    "Bonded(bytes32,uint256,address)": EventFragment;
    "DotTokenCreated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Unbonded(bytes32,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DotTokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbonded"): EventFragment;
}

export class NFTDotTokenFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTDotTokenFactoryInterface;

  functions: {
    ERC721(overrides?: CallOverrides): Promise<[string]>;

    "ERC721()"(overrides?: CallOverrides): Promise<[string]>;

    bond(
      specifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bond(bytes32)"(
      specifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bondWhiteListed(
      specifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bondWhiteListed(bytes32)"(
      specifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bytes32ToString(x: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "bytes32ToString(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    coord(overrides?: CallOverrides): Promise<[string]>;

    "coord()"(overrides?: CallOverrides): Promise<[string]>;

    curves(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "curves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    curvesTokenPrice(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "curvesTokenPrice(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    curves_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "curves_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEndpoints(overrides?: CallOverrides): Promise<[string[]]>;

    "getEndpoints()"(overrides?: CallOverrides): Promise<[string[]]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    getTokenAddress(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getTokenAddress(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initializeCurve(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      price: BigNumberish,
      baseMetadata: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initializeCurve(bytes32,bytes32,int256[],uint256,string,bool)"(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      price: BigNumberish,
      baseMetadata: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newToken(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "newToken(string,string)"(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    reserveToken(overrides?: CallOverrides): Promise<[string]>;

    "reserveToken()"(overrides?: CallOverrides): Promise<[string]>;

    toBytes(
      x: string,
      overrides?: CallOverrides
    ): Promise<[string] & { b: string }>;

    "toBytes(address)"(
      x: string,
      overrides?: CallOverrides
    ): Promise<[string] & { b: string }>;

    tokenFactory(overrides?: CallOverrides): Promise<[string]>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<[string]>;

    tokensMinted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokensMinted(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbond(
      specifier: BytesLike,
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unbond(bytes32,uint256)"(
      specifier: BytesLike,
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistBonder(
      specifier: BytesLike,
      bonder: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "whitelistBonder(bytes32,address,string)"(
      specifier: BytesLike,
      bonder: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedCurve(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "whitelistedCurve(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelisting(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "whitelisting(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  ERC721(overrides?: CallOverrides): Promise<string>;

  "ERC721()"(overrides?: CallOverrides): Promise<string>;

  bond(
    specifier: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bond(bytes32)"(
    specifier: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bondWhiteListed(
    specifier: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bondWhiteListed(bytes32)"(
    specifier: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bytes32ToString(x: BytesLike, overrides?: CallOverrides): Promise<string>;

  "bytes32ToString(bytes32)"(
    x: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  coord(overrides?: CallOverrides): Promise<string>;

  "coord()"(overrides?: CallOverrides): Promise<string>;

  curves(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "curves(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  curvesTokenPrice(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "curvesTokenPrice(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  curves_list(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "curves_list(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEndpoints(overrides?: CallOverrides): Promise<string[]>;

  "getEndpoints()"(overrides?: CallOverrides): Promise<string[]>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  getTokenAddress(
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTokenAddress(bytes32)"(
    endpoint: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  initializeCurve(
    specifier: BytesLike,
    symbol: BytesLike,
    curve: BigNumberish[],
    price: BigNumberish,
    baseMetadata: string,
    whitelisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initializeCurve(bytes32,bytes32,int256[],uint256,string,bool)"(
    specifier: BytesLike,
    symbol: BytesLike,
    curve: BigNumberish[],
    price: BigNumberish,
    baseMetadata: string,
    whitelisted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newToken(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "newToken(string,string)"(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  reserveToken(overrides?: CallOverrides): Promise<string>;

  "reserveToken()"(overrides?: CallOverrides): Promise<string>;

  toBytes(x: string, overrides?: CallOverrides): Promise<string>;

  "toBytes(address)"(x: string, overrides?: CallOverrides): Promise<string>;

  tokenFactory(overrides?: CallOverrides): Promise<string>;

  "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

  tokensMinted(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "tokensMinted(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbond(
    specifier: BytesLike,
    tokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unbond(bytes32,uint256)"(
    specifier: BytesLike,
    tokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistBonder(
    specifier: BytesLike,
    bonder: string,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "whitelistBonder(bytes32,address,string)"(
    specifier: BytesLike,
    bonder: string,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedCurve(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "whitelistedCurve(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelisting(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "whitelisting(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    ERC721(overrides?: CallOverrides): Promise<string>;

    "ERC721()"(overrides?: CallOverrides): Promise<string>;

    bond(specifier: BytesLike, overrides?: CallOverrides): Promise<void>;

    "bond(bytes32)"(
      specifier: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    bondWhiteListed(
      specifier: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "bondWhiteListed(bytes32)"(
      specifier: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    bytes32ToString(x: BytesLike, overrides?: CallOverrides): Promise<string>;

    "bytes32ToString(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    coord(overrides?: CallOverrides): Promise<string>;

    "coord()"(overrides?: CallOverrides): Promise<string>;

    curves(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "curves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    curvesTokenPrice(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "curvesTokenPrice(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curves_list(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "curves_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEndpoints(overrides?: CallOverrides): Promise<string[]>;

    "getEndpoints()"(overrides?: CallOverrides): Promise<string[]>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    getTokenAddress(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTokenAddress(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initializeCurve(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      price: BigNumberish,
      baseMetadata: string,
      whitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "initializeCurve(bytes32,bytes32,int256[],uint256,string,bool)"(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      price: BigNumberish,
      baseMetadata: string,
      whitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    newToken(
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "newToken(string,string)"(
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    reserveToken(overrides?: CallOverrides): Promise<string>;

    "reserveToken()"(overrides?: CallOverrides): Promise<string>;

    toBytes(x: string, overrides?: CallOverrides): Promise<string>;

    "toBytes(address)"(x: string, overrides?: CallOverrides): Promise<string>;

    tokenFactory(overrides?: CallOverrides): Promise<string>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

    tokensMinted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensMinted(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unbond(
      specifier: BytesLike,
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unbond(bytes32,uint256)"(
      specifier: BytesLike,
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistBonder(
      specifier: BytesLike,
      bonder: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelistBonder(bytes32,address,string)"(
      specifier: BytesLike,
      bonder: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedCurve(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "whitelistedCurve(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelisting(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "whitelisting(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    Bonded(
      specifier: BytesLike | null,
      numDots: BigNumberish | null,
      sender: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { specifier: string; numDots: BigNumber; sender: string }
    >;

    DotTokenCreated(
      tokenAddress: null
    ): TypedEventFilter<[string], { tokenAddress: string }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Unbonded(
      specifier: BytesLike | null,
      numDots: BigNumberish | null,
      sender: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { specifier: string; numDots: BigNumber; sender: string }
    >;
  };

  estimateGas: {
    ERC721(overrides?: CallOverrides): Promise<BigNumber>;

    "ERC721()"(overrides?: CallOverrides): Promise<BigNumber>;

    bond(
      specifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bond(bytes32)"(
      specifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bondWhiteListed(
      specifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bondWhiteListed(bytes32)"(
      specifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bytes32ToString(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bytes32ToString(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coord(overrides?: CallOverrides): Promise<BigNumber>;

    "coord()"(overrides?: CallOverrides): Promise<BigNumber>;

    curves(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "curves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curvesTokenPrice(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "curvesTokenPrice(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curves_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "curves_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndpoints(overrides?: CallOverrides): Promise<BigNumber>;

    "getEndpoints()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAddress(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenAddress(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeCurve(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      price: BigNumberish,
      baseMetadata: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initializeCurve(bytes32,bytes32,int256[],uint256,string,bool)"(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      price: BigNumberish,
      baseMetadata: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newToken(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "newToken(string,string)"(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    reserveToken(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    toBytes(x: string, overrides?: CallOverrides): Promise<BigNumber>;

    "toBytes(address)"(
      x: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensMinted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensMinted(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbond(
      specifier: BytesLike,
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unbond(bytes32,uint256)"(
      specifier: BytesLike,
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistBonder(
      specifier: BytesLike,
      bonder: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "whitelistBonder(bytes32,address,string)"(
      specifier: BytesLike,
      bonder: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedCurve(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistedCurve(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelisting(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelisting(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ERC721()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bond(
      specifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bond(bytes32)"(
      specifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bondWhiteListed(
      specifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bondWhiteListed(bytes32)"(
      specifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bytes32ToString(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bytes32ToString(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coord(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coord()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curves(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "curves(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    curvesTokenPrice(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "curvesTokenPrice(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    curves_list(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "curves_list(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEndpoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEndpoints()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenAddress(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenAddress(bytes32)"(
      endpoint: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeCurve(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      price: BigNumberish,
      baseMetadata: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initializeCurve(bytes32,bytes32,int256[],uint256,string,bool)"(
      specifier: BytesLike,
      symbol: BytesLike,
      curve: BigNumberish[],
      price: BigNumberish,
      baseMetadata: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newToken(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "newToken(string,string)"(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserveToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toBytes(
      x: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toBytes(address)"(
      x: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensMinted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensMinted(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbond(
      specifier: BytesLike,
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unbond(bytes32,uint256)"(
      specifier: BytesLike,
      tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistBonder(
      specifier: BytesLike,
      bonder: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "whitelistBonder(bytes32,address,string)"(
      specifier: BytesLike,
      bonder: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedCurve(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistedCurve(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelisting(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelisting(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
