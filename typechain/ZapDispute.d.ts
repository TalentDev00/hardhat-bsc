/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZapDisputeInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "DisputeVoteTallied(uint256,int256,address,address,bool)": EventFragment;
    "NewDispute(uint256,uint256,uint256,address)": EventFragment;
    "NewForkProposal(uint256,uint256,address)": EventFragment;
    "NewZapAddress(address)": EventFragment;
    "Voted(uint256,bool,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisputeVoteTallied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewForkProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewZapAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export class ZapDispute extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZapDisputeInterface;

  functions: {};

  callStatic: {};

  filters: {
    DisputeVoteTallied(
      _disputeID: BigNumberish | null,
      _result: null,
      _reportedMiner: string | null,
      _reportingParty: null,
      _active: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string, boolean],
      {
        _disputeID: BigNumber;
        _result: BigNumber;
        _reportedMiner: string;
        _reportingParty: string;
        _active: boolean;
      }
    >;

    NewDispute(
      _disputeId: BigNumberish | null,
      _requestId: BigNumberish | null,
      _timestamp: null,
      _miner: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string],
      {
        _disputeId: BigNumber;
        _requestId: BigNumber;
        _timestamp: BigNumber;
        _miner: string;
      }
    >;

    NewForkProposal(
      _disputeId: BigNumberish | null,
      _timestamp: null,
      proposedContract: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { _disputeId: BigNumber; _timestamp: BigNumber; proposedContract: string }
    >;

    NewZapAddress(
      _newZap: null
    ): TypedEventFilter<[string], { _newZap: string }>;

    Voted(
      _disputeID: BigNumberish | null,
      _position: null,
      _voter: string | null
    ): TypedEventFilter<
      [BigNumber, boolean, string],
      { _disputeID: BigNumber; _position: boolean; _voter: string }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
