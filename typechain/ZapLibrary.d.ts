/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZapLibraryInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "DataRequested(address,string,string,uint256,uint256,uint256)": EventFragment;
    "NewChallenge(bytes32,uint256,uint256,uint256,string,uint256)": EventFragment;
    "NewRequestOnDeck(uint256,string,bytes32,uint256)": EventFragment;
    "NewValue(uint256,uint256,uint256,uint256,bytes32)": EventFragment;
    "NonceSubmitted(address,string,uint256,uint256,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TipAdded(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DataRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewChallenge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRequestOnDeck"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewValue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonceSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TipAdded"): EventFragment;
}

export class ZapLibrary extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZapLibraryInterface;

  functions: {};

  callStatic: {};

  filters: {
    DataRequested(
      _sender: string | null,
      _query: null,
      _querySymbol: null,
      _granularity: null,
      _requestId: BigNumberish | null,
      _totalTips: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        _sender: string;
        _query: string;
        _querySymbol: string;
        _granularity: BigNumber;
        _requestId: BigNumber;
        _totalTips: BigNumber;
      }
    >;

    NewChallenge(
      _currentChallenge: null,
      _currentRequestId: BigNumberish | null,
      _difficulty: null,
      _multiplier: null,
      _query: null,
      _totalTips: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        _currentChallenge: string;
        _currentRequestId: BigNumber;
        _difficulty: BigNumber;
        _multiplier: BigNumber;
        _query: string;
        _totalTips: BigNumber;
      }
    >;

    NewRequestOnDeck(
      _requestId: BigNumberish | null,
      _query: null,
      _onDeckQueryHash: null,
      _onDeckTotalTips: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      {
        _requestId: BigNumber;
        _query: string;
        _onDeckQueryHash: string;
        _onDeckTotalTips: BigNumber;
      }
    >;

    NewValue(
      _requestId: BigNumberish | null,
      _time: null,
      _value: null,
      _totalTips: null,
      _currentChallenge: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        _requestId: BigNumber;
        _time: BigNumber;
        _value: BigNumber;
        _totalTips: BigNumber;
        _currentChallenge: string;
      }
    >;

    NonceSubmitted(
      _miner: string | null,
      _nonce: null,
      _requestId: BigNumberish | null,
      _value: null,
      _currentChallenge: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        _miner: string;
        _nonce: string;
        _requestId: BigNumber;
        _value: BigNumber;
        _currentChallenge: string;
      }
    >;

    OwnershipTransferred(
      _previousOwner: string | null,
      _newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { _previousOwner: string; _newOwner: string }
    >;

    TipAdded(
      _sender: string | null,
      _requestId: BigNumberish | null,
      _tip: null,
      _totalTips: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _sender: string;
        _requestId: BigNumber;
        _tip: BigNumber;
        _totalTips: BigNumber;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
